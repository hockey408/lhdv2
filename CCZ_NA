WITH params AS (
  SELECT DATE '2025-07-31' AS as_of_date
),
base AS (
  SELECT
      End_of_Month_Date,
      Bank_Code,
      Account_Name,
      Contract_Source_System,
      Customer_Number,
      Facility_ID,
      Account_Identifier,
      Account_Key,
      Status_Code_Description,
      Instrument_Type,
      Source_System_Balance,
      GL_Balance,
      Available_Balance,
      Borrower_Risk_Rating,
      PD_Grade,
      Days_Past_Due,
      Non_Accrual_Flag
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = (SELECT as_of_date FROM params)
    AND GL_ACCOUNT_HIER_LEVEL_4 in ('Total Loans','Lns Held for Sale')
    AND Non_Accrual_Flag = 'Y'
    AND Source_System_Balance > 0
),
enriched AS (
  SELECT
    b.*,
    CASE
      WHEN Days_Past_Due = 0 THEN 'Zero Days'
      WHEN Days_Past_Due BETWEEN 1  AND 30  THEN '1-30 Days'
      WHEN Days_Past_Due BETWEEN 31 AND 90  THEN '31-90 Days'
      WHEN Days_Past_Due BETWEEN 91 AND 180 THEN '91-180 Days'
      WHEN Days_Past_Due > 180 THEN '180+ Days'
      ELSE 'Unknown'
    END AS Days_Past_Due_Bucket,
    CASE
      WHEN Source_System_Balance < 250000 THEN '< $250k'
      WHEN Source_System_Balance < 500000 THEN '$250k - < $500k'
      ELSE '>= $500k'
    END AS Balance_Bucket
  FROM base b
)
SELECT *
FROM enriched
ORDER BY Bank_Code, Account_Name, Account_Identifier;









WITH params AS (
  SELECT
    DATE '2025-07-31'                 AS curr_eom,
    ADD_MONTHS(DATE '2025-07-31', -1) AS prev_eom
),
pop AS (
  SELECT
      End_of_Month_Date,
      Account_Identifier,
      Account_Name,
      Bank_Code,
      Contract_Source_System,
      Source_System_Balance,
      Non_Accrual_Flag
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Source_System_Balance > 0
    AND End_of_Month_Date IN ((SELECT curr_eom FROM params),
                              (SELECT prev_eom FROM params))
),
curr AS (
  SELECT *
  FROM pop
  WHERE End_of_Month_Date = (SELECT curr_eom FROM params)
    AND Non_Accrual_Flag = 'Y'
),
prev AS (
  SELECT *
  FROM pop
  WHERE End_of_Month_Date = (SELECT prev_eom FROM params)
    AND Non_Accrual_Flag = 'Y'
)
SELECT
  COALESCE(c.Account_Identifier, p.Account_Identifier) AS Account_Identifier,
  COALESCE(c.Account_Name,       p.Account_Name)       AS Account_Name,
  COALESCE(c.Bank_Code,          p.Bank_Code)          AS Bank_Code,
  COALESCE(c.Contract_Source_System, p.Contract_Source_System) AS Contract_Source_System,
  CASE
    WHEN p.Account_Identifier IS NULL AND c.Account_Identifier IS NOT NULL THEN 'Added (New NA)'
    WHEN c.Account_Identifier IS NULL AND p.Account_Identifier IS NOT NULL THEN 'Removed (Resolved/Out)'
    ELSE 'Persisting'
  END AS NA_Status_Change,
  p.Source_System_Balance AS Prev_Bal,
  c.Source_System_Balance AS Curr_Bal,
  /* use a numeric sort key instead of ordering by the alias */
  CASE
    WHEN p.Account_Identifier IS NULL AND c.Account_Identifier IS NOT NULL THEN 0
    WHEN c.Account_Identifier IS NULL AND p.Account_Identifier IS NOT NULL THEN 1
    WHEN c.Account_Identifier IS NOT NULL AND p.Account_Identifier IS NOT NULL THEN 2
    ELSE 3
  END AS Sort_Order
FROM curr c
FULL OUTER JOIN prev p
  ON c.Account_Identifier = p.Account_Identifier
ORDER BY
  Sort_Order,
  Bank_Code,
  Account_Identifier;






WITH params AS (
  SELECT DATE '2025-07-31' AS as_of_date
),
base AS (
  SELECT *
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = (SELECT as_of_date FROM params)
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
    AND Source_System_Balance > 0
)
SELECT
  CASE
    WHEN Source_System_Balance < 250000 THEN '< $250k'
    WHEN Source_System_Balance < 500000 THEN '$250k - < $500k'
    ELSE '>= $500k'
  END AS Balance_Bucket,
  COUNT(*)                   AS Loans,
  SUM(Source_System_Balance) AS Balance
FROM base
GROUP BY
  CASE
    WHEN Source_System_Balance < 250000 THEN '< $250k'
    WHEN Source_System_Balance < 500000 THEN '$250k - < $500k'
    ELSE '>= $500k'
  END
ORDER BY
  CASE
    WHEN MIN(Source_System_Balance) < 250000 THEN 0
    WHEN MIN(Source_System_Balance) < 500000 THEN 1
    ELSE 2
  END;



WITH params AS (
  SELECT DATE '2025-07-31' AS as_of_date
),
base AS (
  SELECT
      End_of_Month_Date,
      Bank_Code,
      Account_Name,
      Contract_Source_System,
      Customer_Number,
      Facility_ID,
      Account_Identifier,
      Account_Key,
      Status_Code_Description,
      Instrument_Type,
      Source_System_Balance,
      GL_Balance,
      Available_Balance,
      Borrower_Risk_Rating,
      PD_Grade,
      Days_Past_Due,
      Non_Accrual_Flag
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = (SELECT as_of_date FROM params)
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
    AND Source_System_Balance > 0
),
enriched AS (
  SELECT
    b.*,
    CASE
      WHEN Days_Past_Due = 0 THEN 'Zero Days'
      WHEN Days_Past_Due BETWEEN 1  AND 30  THEN '1-30 Days'
      WHEN Days_Past_Due BETWEEN 31 AND 90  THEN '31-90 Days'
      WHEN Days_Past_Due BETWEEN 91 AND 180 THEN '91-180 Days'
      WHEN Days_Past_Due > 180 THEN '180+ Days'
      ELSE 'Unknown'
    END AS Days_Past_Due_Bucket,
    CASE
      WHEN Source_System_Balance < 250000 THEN '< $250k'
      WHEN Source_System_Balance < 500000 THEN '$250k - < $500k'
      ELSE '>= $500k'
    END AS Balance_Bucket
  FROM base b
)
SELECT *
FROM enriched
ORDER BY Bank_Code, Account_Name, Account_Identifier;





WITH params AS (
  SELECT DATE '2025-07-31' AS as_of_date
),
base AS (
  SELECT *
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = (SELECT as_of_date FROM params)
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
    AND Source_System_Balance > 0
),
enriched AS (
  SELECT
    b.Source_System_Balance,
    CASE
      WHEN b.Days_Past_Due = 0 THEN 'Zero Days'
      WHEN b.Days_Past_Due BETWEEN 1  AND 30  THEN '1-30 Days'
      WHEN b.Days_Past_Due BETWEEN 31 AND 90  THEN '31-90 Days'
      WHEN b.Days_Past_Due BETWEEN 91 AND 180 THEN '91-180 Days'
      WHEN b.Days_Past_Due > 180 THEN '180+ Days'
      ELSE 'Unknown'
    END AS Days_Past_Due_Bucket
  FROM base b
)
SELECT
  Days_Past_Due_Bucket,
  COUNT(*)                         AS Loans,
  SUM(Source_System_Balance)       AS Balance
FROM enriched
GROUP BY Days_Past_Due_Bucket
ORDER BY
  CASE Days_Past_Due_Bucket
    WHEN 'Zero Days' THEN 0
    WHEN '1-30 Days' THEN 1
    WHEN '31-90 Days' THEN 2
    WHEN '91-180 Days' THEN 3
    WHEN '180+ Days'  THEN 4
    ELSE 5
  END;






WITH params AS (
  SELECT DATE '2025-07-31' AS as_of_date
),
base AS (
  SELECT *
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = (SELECT as_of_date FROM params)
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
    AND Source_System_Balance > 0
)
SELECT
  CASE
    WHEN Source_System_Balance < 250000 THEN '< $250k'
    WHEN Source_System_Balance < 500000 THEN '$250k - < $500k'
    ELSE '>= $500k'
  END AS Balance_Bucket,
  COUNT(*)                   AS Loans,
  SUM(Source_System_Balance) AS Balance
FROM base
GROUP BY
  CASE
    WHEN Source_System_Balance < 250000 THEN '< $250k'
    WHEN Source_System_Balance < 500000 THEN '$250k - < $500k'
    ELSE '>= $500k'
  END
ORDER BY
  CASE
    WHEN Balance_Bucket = '< $250k'         THEN 0
    WHEN Balance_Bucket = '$250k - < $500k' THEN 1
    WHEN Balance_Bucket = '>= $500k'        THEN 2
    ELSE 3
  END;



WITH params AS (
  SELECT DATE '2025-07-31' AS as_of_date
),
base AS (
  SELECT
    Bank_Code,
    Contract_Source_System,
    Source_System_Balance
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = (SELECT as_of_date FROM params)
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
    AND Source_System_Balance > 0
)
SELECT
  Bank_Code,
  Contract_Source_System,
  COUNT(*)                   AS Loans,
  SUM(Source_System_Balance) AS Balance
FROM base
GROUP BY Bank_Code, Contract_Source_System
ORDER BY Bank_Code, Contract_Source_System;





WITH params AS (
  SELECT
    DATE '2025-07-31'                 AS curr_eom,
    ADD_MONTHS(DATE '2025-07-31', -1) AS prev_eom
),
pop AS (
  SELECT
      End_of_Month_Date,
      Account_Identifier,
      Account_Name,
      Bank_Code,
      Contract_Source_System,
      Source_System_Balance,
      Non_Accrual_Flag
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Source_System_Balance > 0
    AND End_of_Month_Date IN ((SELECT curr_eom FROM params),
                              (SELECT prev_eom FROM params))
),
curr AS (
  SELECT *
  FROM pop
  WHERE End_of_Month_Date = (SELECT curr_eom FROM params)
    AND Non_Accrual_Flag = 'Y'
),
prev AS (
  SELECT *
  FROM pop
  WHERE End_of_Month_Date = (SELECT prev_eom FROM params)
    AND Non_Accrual_Flag = 'Y'
)
SELECT
  COALESCE(c.Account_Identifier, p.Account_Identifier)       AS Account_Identifier,
  COALESCE(c.Account_Name,       p.Account_Name)             AS Account_Name,
  COALESCE(c.Bank_Code,          p.Bank_Code)                AS Bank_Code,
  COALESCE(c.Contract_Source_System, p.Contract_Source_System) AS Contract_Source_System,
  CASE
    WHEN p.Account_Identifier IS NULL AND c.Account_Identifier IS NOT NULL THEN 'Added (New NA)'
    WHEN c.Account_Identifier IS NULL AND p.Account_Identifier IS NOT NULL THEN 'Removed (Resolved/Out)'
    ELSE 'Persisting'
  END AS NA_Status_Change,
  p.Source_System_Balance AS Prev_Bal,
  c.Source_System_Balance AS Curr_Bal
FROM curr c
FULL OUTER JOIN prev p
  ON c.Account_Identifier = p.Account_Identifier
ORDER BY
  CASE NA_Status_Change
    WHEN 'Added (New NA)'         THEN 0
    WHEN 'Removed (Resolved/Out)' THEN 1
    WHEN 'Persisting'             THEN 2
    ELSE 3
  END,
  Bank_Code, Account_Identifier;























/* ================================================
   3-Way Non-Accrual Reconciliation (Single Result)
   Netezza-safe: CAST(), 32 cols aligned across UNION ALL
   ================================================ */

WITH params AS (
  SELECT DATE '2025-07-31' AS curr_eom,
         ADD_MONTHS(DATE '2025-07-31', -1) AS prev_eom
),
pop_all AS (
  SELECT
      End_of_Month_Date,
      Bank_Code,
      Account_Name,
      Contract_Source_System,
      Customer_Number,
      Facility_ID,
      Account_Identifier,
      Account_Key,
      Status_Code_Description,
      Instrument_Type,
      Source_System_Balance,
      GL_Balance,
      Available_Balance,
      Borrower_Risk_Rating,
      PD_Grade,
      Days_Past_Due,
      Non_Accrual_Flag
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Source_System_Balance > 0
    AND End_of_Month_Date IN ((SELECT curr_eom FROM params),
                              (SELECT prev_eom FROM params))
),
curr_na AS (
  SELECT *
  FROM pop_all
  WHERE End_of_Month_Date = (SELECT curr_eom FROM params)
    AND Non_Accrual_Flag = 'Y'
),
prev_na AS (
  SELECT *
  FROM pop_all
  WHERE End_of_Month_Date = (SELECT prev_eom FROM params)
    AND Non_Accrual_Flag = 'Y'
),
enriched AS (
  SELECT
    c.*,
    CASE
      WHEN Days_Past_Due = 0 THEN 'Zero Days'
      WHEN Days_Past_Due BETWEEN 1  AND 30  THEN '1-30 Days'
      WHEN Days_Past_Due BETWEEN 31 AND 90  THEN '31-90 Days'
      WHEN Days_Past_Due BETWEEN 91 AND 180 THEN '91-180 Days'
      WHEN Days_Past_Due > 180 THEN '180+ Days'
      ELSE 'Unknown'
    END AS Days_Past_Due_Bucket,
    CASE
      WHEN Source_System_Balance < 250000 THEN '< $250k'
      WHEN Source_System_Balance < 500000 THEN '$250k - < $500k'
      ELSE '>= $500k'
    END AS Balance_Bucket
  FROM curr_na c
),
dupes AS (
  SELECT End_of_Month_Date, Account_Identifier, COUNT(*) AS dup_count
  FROM enriched
  GROUP BY 1,2
  HAVING COUNT(*) > 1
),
sanity_by_group AS (
  SELECT
    Bank_Code,
    Contract_Source_System,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS sum_source_bal,
    SUM(GL_Balance)            AS sum_gl_bal,
    SUM(CASE WHEN Days_Past_Due IS NULL THEN 1 ELSE 0 END) AS null_dpd,
    SUM(CASE WHEN COALESCE(TRIM(CAST(PD_Grade AS VARCHAR(50))), '') IN ('','NA') THEN 1 ELSE 0 END) AS missing_pd_grade,
    SUM(CASE WHEN ABS(GL_Balance - Source_System_Balance) > 1000 THEN 1 ELSE 0 END) AS gl_src_diff_gt_1k,
    SUM(CASE WHEN Days_Past_Due = 0 THEN 1 ELSE 0 END) AS dpd_zero
  FROM enriched
  GROUP BY 1,2
),
sum_by_dpd AS (
  SELECT Days_Past_Due_Bucket, COUNT(*) AS loans, SUM(Source_System_Balance) AS balance
  FROM enriched GROUP BY 1
),
sum_by_bal_bucket AS (
  SELECT Balance_Bucket, COUNT(*) AS loans, SUM(Source_System_Balance) AS balance
  FROM enriched GROUP BY 1
),
sum_by_bank_system AS (
  SELECT Bank_Code, Contract_Source_System, COUNT(*) AS loans, SUM(Source_System_Balance) AS balance
  FROM enriched GROUP BY 1,2
),
mom_diff AS (
  SELECT
    COALESCE(c.Account_Identifier, p.Account_Identifier) AS Account_Identifier,
    COALESCE(c.Account_Name,       p.Account_Name)       AS Account_Name,
    COALESCE(c.Bank_Code,          p.Bank_Code)          AS Bank_Code,
    COALESCE(c.Contract_Source_System, p.Contract_Source_System) AS Contract_Source_System,
    CASE
      WHEN p.Account_Identifier IS NULL AND c.Account_Identifier IS NOT NULL THEN 'Added (New NA)'
      WHEN c.Account_Identifier IS NULL AND p.Account_Identifier IS NOT NULL THEN 'Removed (Resolved/Out)'
      ELSE 'Persisting'
    END AS NA_Status_Change,
    p.Source_System_Balance AS Prev_Bal,
    c.Source_System_Balance AS Curr_Bal
  FROM curr_na c
  FULL OUTER JOIN prev_na p
    ON c.Account_Identifier = p.Account_Identifier
),

/* ---------- 32-column, type-locked rows for each section ---------- */
detail_rows AS (
  SELECT
    CAST('DETAIL' AS VARCHAR(24))                      AS Report_Section,
    CAST(NULL     AS VARCHAR(64))                      AS Subsection,
    e.End_of_Month_Date,
    e.Bank_Code,
    e.Account_Name,
    e.Contract_Source_System,
    e.Customer_Number,
    e.Facility_ID,
    e.Account_Identifier,
    e.Account_Key,
    e.Status_Code_Description,
    e.Instrument_Type,
    CAST(e.Source_System_Balance AS NUMERIC(18,2))     AS Source_System_Balance,
    CAST(e.GL_Balance            AS NUMERIC(18,2))     AS GL_Balance,
    CAST(e.Available_Balance     AS NUMERIC(18,2))     AS Available_Balance,
    e.Borrower_Risk_Rating,
    CAST(e.PD_Grade              AS VARCHAR(50))       AS PD_Grade,
    e.Days_Past_Due,
    e.Non_Accrual_Flag,
    CAST(e.Days_Past_Due_Bucket  AS VARCHAR(32))       AS Days_Past_Due_Bucket,
    CAST(e.Balance_Bucket        AS VARCHAR(32))       AS Balance_Bucket,
    CAST(NULL AS INTEGER)                               AS Loans,
    CAST(NULL AS NUMERIC(18,2))                         AS Balance_Sum,
    CAST(NULL AS NUMERIC(18,2))                         AS GL_Source_Diff_Sum,
    CAST(NULL AS INTEGER)                               AS Dup_Count,
    CAST(NULL AS INTEGER)                               AS Null_DPD,
    CAST(NULL AS INTEGER)                               AS Missing_PD_Grade,
    CAST(NULL AS INTEGER)                               AS GL_SRC_Diff_GT_1k,
    CAST(NULL AS INTEGER)                               AS DPD_Zero,
    CAST(NULL AS NUMERIC(18,2))                         AS Prev_Bal,
    CAST(NULL AS NUMERIC(18,2))                         AS Curr_Bal,
    CAST(NULL AS VARCHAR(40))                           AS NA_Status_Change
  FROM enriched e
),
summary_dpd_rows AS (
  SELECT
    CAST('SUMMARY' AS VARCHAR(24)),
    CAST('By DPD Bucket' AS VARCHAR(64)),
    CAST(NULL AS DATE),
    CAST(NULL AS VARCHAR(10)),
    CAST(NULL AS VARCHAR(200)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(60)),
    CAST(NULL AS VARCHAR(60)),
    CAST(NULL AS VARCHAR(200)),
    CAST(NULL AS VARCHAR(80)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(50)),
    CAST(NULL AS INTEGER),
    CAST(NULL AS VARCHAR(1)),
    CAST(s.Days_Past_Due_Bucket AS VARCHAR(32)),
    CAST(NULL AS VARCHAR(32)),
    s.loans,
    CAST(s.balance AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS INTEGER),
    CAST(NULL AS INTEGER),
    CAST(NULL AS INTEGER),
    CAST(NULL AS INTEGER),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS VARCHAR(40))
  FROM sum_by_dpd s
),
summary_bal_rows AS (
  SELECT
    CAST('SUMMARY' AS VARCHAR(24)),
    CAST('By Balance Bucket' AS VARCHAR(64)),
    CAST(NULL AS DATE),
    CAST(NULL AS VARCHAR(10)),
    CAST(NULL AS VARCHAR(200)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(60)),
    CAST(NULL AS VARCHAR(60)),
    CAST(NULL AS VARCHAR(200)),
    CAST(NULL AS VARCHAR(80)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(50)),
    CAST(NULL AS INTEGER),
    CAST(NULL AS VARCHAR(1)),
    CAST(NULL AS VARCHAR(32)),
    CAST(s.Balance_Bucket AS VARCHAR(32)),
    s.loans,
    CAST(s.balance AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS INTEGER),
    CAST(NULL AS INTEGER),
    CAST(NULL AS INTEGER),
    CAST(NULL AS INTEGER),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS VARCHAR(40))
  FROM sum_by_bal_bucket s
),
summary_bank_sys_rows AS (
  SELECT
    CAST('SUMMARY' AS VARCHAR(24)),
    CAST('By Bank x System' AS VARCHAR(64)),
    CAST(NULL AS DATE),
    CAST(s.Bank_Code AS VARCHAR(10)),
    CAST(NULL AS VARCHAR(200)),
    CAST(s.Contract_Source_System AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(60)),
    CAST(NULL AS VARCHAR(60)),
    CAST(NULL AS VARCHAR(200)),
    CAST(NULL AS VARCHAR(80)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(50)),
    CAST(NULL AS INTEGER),
    CAST(NULL AS VARCHAR(1)),
    CAST(NULL AS VARCHAR(32)),
    CAST(NULL AS VARCHAR(32)),
    s.loans,
    CAST(s.balance AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS INTEGER),
    CAST(NULL AS INTEGER),
    CAST(NULL AS INTEGER),
    CAST(NULL AS INTEGER),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS VARCHAR(40))
  FROM sum_by_bank_system s
),
sanity_dupes_rows AS (
  SELECT
    CAST('SANITY' AS VARCHAR(24)),
    CAST('Dupes: EOM + Account_Identifier' AS VARCHAR(64)),
    d.End_of_Month_Date,
    CAST(NULL AS VARCHAR(10)),
    CAST(NULL AS VARCHAR(200)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(40)),
    d.Account_Identifier,
    CAST(NULL AS VARCHAR(60)),
    CAST(NULL AS VARCHAR(200)),
    CAST(NULL AS VARCHAR(80)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(50)),
    CAST(NULL AS INTEGER),
    CAST(NULL AS VARCHAR(1)),
    CAST(NULL AS VARCHAR(32)),
    CAST(NULL AS VARCHAR(32)),
    CAST(NULL AS INTEGER),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    d.dup_count,
    CAST(NULL AS INTEGER),
    CAST(NULL AS INTEGER),
    CAST(NULL AS INTEGER),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS VARCHAR(40))
  FROM dupes d
),
sanity_group_rows AS (
  SELECT
    CAST('SANITY' AS VARCHAR(24)),
    CAST('Group Quality: Bank x System' AS VARCHAR(64)),
    CAST(NULL AS DATE),
    CAST(s.Bank_Code AS VARCHAR(10)),
    CAST(NULL AS VARCHAR(200)),
    CAST(s.Contract_Source_System AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(60)),
    CAST(NULL AS VARCHAR(60)),
    CAST(NULL AS VARCHAR(200)),
    CAST(NULL AS VARCHAR(80)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(50)),
    CAST(NULL AS INTEGER),
    CAST(NULL AS VARCHAR(1)),
    CAST(NULL AS VARCHAR(32)),
    CAST(NULL AS VARCHAR(32)),
    s.loans,
    CAST(NULL AS NUMERIC(18,2)),
    CAST(s.sum_gl_bal - s.sum_source_bal AS NUMERIC(18,2)),
    CAST(NULL AS INTEGER),
    s.null_dpd,
    s.missing_pd_grade,
    s.gl_src_diff_gt_1k,
    s.dpd_zero,
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS VARCHAR(40))
  FROM sanity_by_group s
),
mom_rows AS (
  SELECT
    CAST('MOM' AS VARCHAR(24)),
    CAST('Adds/Drops/Persisting' AS VARCHAR(64)),
    CAST(NULL AS DATE),
    CAST(m.Bank_Code AS VARCHAR(10)),
    CAST(m.Account_Name AS VARCHAR(200)),
    CAST(m.Contract_Source_System AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(40)),
    CAST(m.Account_Identifier AS VARCHAR(60)),
    CAST(NULL AS VARCHAR(60)),
    CAST(NULL AS VARCHAR(200)),
    CAST(NULL AS VARCHAR(80)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS VARCHAR(40)),
    CAST(NULL AS VARCHAR(50)),
    CAST(NULL AS INTEGER),
    CAST(NULL AS VARCHAR(1)),
    CAST(NULL AS VARCHAR(32)),
    CAST(NULL AS VARCHAR(32)),
    CAST(NULL AS INTEGER),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS NUMERIC(18,2)),
    CAST(NULL AS INTEGER),
    CAST(NULL AS INTEGER),
    CAST(NULL AS INTEGER),
    CAST(NULL AS INTEGER),
    CAST(m.Prev_Bal AS NUMERIC(18,2)),
    CAST(m.Curr_Bal AS NUMERIC(18,2)),
    CAST(m.NA_Status_Change AS VARCHAR(40))
  FROM mom_diff m
)

/* Final single result */
SELECT * FROM detail_rows
UNION ALL SELECT * FROM summary_dpd_rows
UNION ALL SELECT * FROM summary_bal_rows
UNION ALL SELECT * FROM summary_bank_sys_rows
UNION ALL SELECT * FROM sanity_dupes_rows
UNION ALL SELECT * FROM sanity_group_rows
UNION ALL SELECT * FROM mom_rows
ORDER BY
  CASE Report_Section
    WHEN 'DETAIL'  THEN 0
    WHEN 'SUMMARY' THEN 1
    WHEN 'SANITY'  THEN 2
    WHEN 'MOM'     THEN 3
    ELSE 9
  END,
  Subsection NULLS LAST,
  Bank_Code NULLS LAST,
  Contract_Source_System NULLS LAST,
  Days_Past_Due_Bucket NULLS LAST,
  Balance_Bucket NULLS LAST,
  Account_Identifier NULLS LAST;






WITH params AS (
  SELECT DATE '2025-07-31' AS curr_eom,
         ADD_MONTHS(DATE '2025-07-31', -1) AS prev_eom
),
pop_all AS (
  SELECT End_of_Month_Date, Bank_Code, Account_Name, Contract_Source_System,
         Customer_Number, Facility_ID, Account_Identifier, Account_Key,
         Status_Code_Description, Instrument_Type, Source_System_Balance,
         GL_Balance, Available_Balance, Borrower_Risk_Rating, PD_Grade,
         Days_Past_Due, Non_Accrual_Flag
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Source_System_Balance > 0
    AND End_of_Month_Date IN ((SELECT curr_eom FROM params),(SELECT prev_eom FROM params))
),
curr_na AS (
  SELECT * FROM pop_all
  WHERE End_of_Month_Date = (SELECT curr_eom FROM params) AND Non_Accrual_Flag = 'Y'
),
prev_na AS (
  SELECT * FROM pop_all
  WHERE End_of_Month_Date = (SELECT prev_eom FROM params) AND Non_Accrual_Flag = 'Y'
),
enriched AS (
  SELECT c.*,
         CASE WHEN Days_Past_Due = 0 THEN 'Zero Days'
              WHEN Days_Past_Due BETWEEN 1 AND 30 THEN '1-30 Days'
              WHEN Days_Past_Due BETWEEN 31 AND 90 THEN '31-90 Days'
              WHEN Days_Past_Due BETWEEN 91 AND 180 THEN '91-180 Days'
              WHEN Days_Past_Due > 180 THEN '180+ Days'
              ELSE 'Unknown' END AS Days_Past_Due_Bucket,
         CASE WHEN Source_System_Balance < 250000 THEN '< $250k'
              WHEN Source_System_Balance < 500000 THEN '$250k - < $500k'
              ELSE '>= $500k' END AS Balance_Bucket
  FROM curr_na c
),
dupes AS (
  SELECT End_of_Month_Date, Account_Identifier, COUNT(*) AS dup_count
  FROM enriched GROUP BY 1,2 HAVING COUNT(*) > 1
),
sanity_by_group AS (
  SELECT Bank_Code, Contract_Source_System,
         COUNT(*) AS loans,
         SUM(Source_System_Balance) AS sum_source_bal,
         SUM(GL_Balance) AS sum_gl_bal,
         SUM(CASE WHEN Days_Past_Due IS NULL THEN 1 ELSE 0 END) AS null_dpd,
         SUM(CASE WHEN COALESCE(TRIM(CAST(PD_Grade AS VARCHAR(50))), '') IN ('','NA') THEN 1 ELSE 0 END) AS missing_pd_grade,
         SUM(CASE WHEN ABS(GL_Balance - Source_System_Balance) > 1000 THEN 1 ELSE 0 END) AS gl_src_diff_gt_1k,
         SUM(CASE WHEN Days_Past_Due = 0 THEN 1 ELSE 0 END) AS dpd_zero
  FROM enriched GROUP BY 1,2
),
sum_by_dpd AS (
  SELECT Days_Past_Due_Bucket, COUNT(*) AS loans, SUM(Source_System_Balance) AS balance
  FROM enriched GROUP BY 1
),
sum_by_bal_bucket AS (
  SELECT Balance_Bucket, COUNT(*) AS loans, SUM(Source_System_Balance) AS balance
  FROM enriched GROUP BY 1
),
sum_by_bank_system AS (
  SELECT Bank_Code, Contract_Source_System, COUNT(*) AS loans, SUM(Source_System_Balance) AS balance
  FROM enriched GROUP BY 1,2
),
mom_diff AS (
  SELECT COALESCE(c.Account_Identifier, p.Account_Identifier) AS Account_Identifier,
         COALESCE(c.Account_Name, p.Account_Name) AS Account_Name,
         COALESCE(c.Bank_Code, p.Bank_Code) AS Bank_Code,
         COALESCE(c.Contract_Source_System, p.Contract_Source_System) AS Contract_Source_System,
         CASE WHEN p.Account_Identifier IS NULL AND c.Account_Identifier IS NOT NULL THEN 'Added (New NA)'
              WHEN c.Account_Identifier IS NULL AND p.Account_Identifier IS NOT NULL THEN 'Removed (Resolved/Out)'
              ELSE 'Persisting' END AS NA_Status_Change,
         p.Source_System_Balance AS Prev_Bal,
         c.Source_System_Balance AS Curr_Bal
  FROM curr_na c
  FULL OUTER JOIN prev_na p ON c.Account_Identifier = p.Account_Identifier
),
/* normalize each section to the same 32 columns */
detail_rows AS (
  SELECT 'DETAIL'::VARCHAR(24), NULL::VARCHAR(64),
         e.End_of_Month_Date, e.Bank_Code, e.Account_Name, e.Contract_Source_System,
         e.Customer_Number, e.Facility_ID, e.Account_Identifier, e.Account_Key,
         e.Status_Code_Description, e.Instrument_Type,
         CAST(e.Source_System_Balance AS NUMERIC(18,2)),
         CAST(e.GL_Balance AS NUMERIC(18,2)),
         CAST(e.Available_Balance AS NUMERIC(18,2)),
         e.Borrower_Risk_Rating, CAST(e.PD_Grade AS VARCHAR(50)),
         e.Days_Past_Due, e.Non_Accrual_Flag, e.Days_Past_Due_Bucket, e.Balance_Bucket,
         NULL::INTEGER, NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::INTEGER, NULL::INTEGER,
         NULL::INTEGER, NULL::INTEGER, NULL::INTEGER,
         NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::VARCHAR(40)
  FROM enriched e
),
summary_dpd_rows AS (
  SELECT 'SUMMARY','By DPD Bucket',
         NULL::DATE, NULL::VARCHAR(10), NULL::VARCHAR(200), NULL::VARCHAR(40),
         NULL::VARCHAR(40), NULL::VARCHAR(40), NULL::VARCHAR(60), NULL::VARCHAR(60),
         NULL::VARCHAR(200), NULL::VARCHAR(80),
         NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::NUMERIC(18,2),
         NULL::VARCHAR(40), NULL::VARCHAR(50), NULL::INTEGER, NULL::VARCHAR(1),
         s.Days_Past_Due_Bucket, NULL::VARCHAR(32),
         s.loans, CAST(s.balance AS NUMERIC(18,2)),
         NULL::NUMERIC(18,2), NULL::INTEGER, NULL::INTEGER, NULL::INTEGER, NULL::INTEGER,
         NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::VARCHAR(40)
  FROM sum_by_dpd s
),
summary_bal_rows AS (
  SELECT 'SUMMARY','By Balance Bucket',
         NULL::DATE, NULL::VARCHAR(10), NULL::VARCHAR(200), NULL::VARCHAR(40),
         NULL::VARCHAR(40), NULL::VARCHAR(40), NULL::VARCHAR(60), NULL::VARCHAR(60),
         NULL::VARCHAR(200), NULL::VARCHAR(80),
         NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::NUMERIC(18,2),
         NULL::VARCHAR(40), NULL::VARCHAR(50), NULL::INTEGER, NULL::VARCHAR(1),
         NULL::VARCHAR(32), s.Balance_Bucket,
         s.loans, CAST(s.balance AS NUMERIC(18,2)),
         NULL::NUMERIC(18,2), NULL::INTEGER, NULL::INTEGER, NULL::INTEGER, NULL::INTEGER,
         NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::VARCHAR(40)
  FROM sum_by_bal_bucket s
),
summary_bank_sys_rows AS (
  SELECT 'SUMMARY','By Bank × System',
         NULL::DATE, s.Bank_Code, NULL::VARCHAR(200), s.Contract_Source_System,
         NULL::VARCHAR(40), NULL::VARCHAR(40), NULL::VARCHAR(60), NULL::VARCHAR(60),
         NULL::VARCHAR(200), NULL::VARCHAR(80),
         NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::NUMERIC(18,2),
         NULL::VARCHAR(40), NULL::VARCHAR(50), NULL::INTEGER, NULL::VARCHAR(1),
         NULL::VARCHAR(32), NULL::VARCHAR(32),
         s.loans, CAST(s.balance AS NUMERIC(18,2)),
         NULL::NUMERIC(18,2), NULL::INTEGER, NULL::INTEGER, NULL::INTEGER, NULL::INTEGER,
         NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::VARCHAR(40)
  FROM sum_by_bank_system s
),
sanity_dupes_rows AS (
  SELECT 'SANITY','Dupes: EOM + Account_Identifier',
         d.End_of_Month_Date, NULL::VARCHAR(10), NULL::VARCHAR(200), NULL::VARCHAR(40),
         NULL::VARCHAR(40), NULL::VARCHAR(40), d.Account_Identifier, NULL::VARCHAR(60),
         NULL::VARCHAR(200), NULL::VARCHAR(80),
         NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::NUMERIC(18,2),
         NULL::VARCHAR(40), NULL::VARCHAR(50), NULL::INTEGER, NULL::VARCHAR(1),
         NULL::VARCHAR(32), NULL::VARCHAR(32),
         NULL::INTEGER, NULL::NUMERIC(18,2), NULL::NUMERIC(18,2),
         d.dup_count, NULL::INTEGER, NULL::INTEGER, NULL::INTEGER,
         NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::VARCHAR(40)
  FROM dupes d
),
sanity_group_rows AS (
  SELECT 'SANITY','Group Quality: Bank × System',
         NULL::DATE, s.Bank_Code, NULL::VARCHAR(200), s.Contract_Source_System,
         NULL::VARCHAR(40), NULL::VARCHAR(40), NULL::VARCHAR(60), NULL::VARCHAR(60),
         NULL::VARCHAR(200), NULL::VARCHAR(80),
         NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::NUMERIC(18,2),
         NULL::VARCHAR(40), NULL::VARCHAR(50), NULL::INTEGER, NULL::VARCHAR(1),
         NULL::VARCHAR(32), NULL::VARCHAR(32),
         s.loans, NULL::NUMERIC(18,2),
         CAST(s.sum_gl_bal - s.sum_source_bal AS NUMERIC(18,2)),
         NULL::INTEGER, s.null_dpd, s.missing_pd_grade, s.gl_src_diff_gt_1k, s.dpd_zero,
         NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::VARCHAR(40)
  FROM sanity_by_group s
),
mom_rows AS (
  SELECT 'MOM','Adds/Drops/Persisting',
         NULL::DATE, m.Bank_Code, m.Account_Name, m.Contract_Source_System,
         NULL::VARCHAR(40), NULL::VARCHAR(40), m.Account_Identifier, NULL::VARCHAR(60),
         NULL::VARCHAR(200), NULL::VARCHAR(80),
         NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::NUMERIC(18,2),
         NULL::VARCHAR(40), NULL::VARCHAR(50), NULL::INTEGER, NULL::VARCHAR(1),
         NULL::VARCHAR(32), NULL::VARCHAR(32),
         NULL::INTEGER, NULL::NUMERIC(18,2), NULL::NUMERIC(18,2),
         NULL::INTEGER, NULL::INTEGER, NULL::INTEGER, NULL::INTEGER,
         CAST(m.Prev_Bal AS NUMERIC(18,2)), CAST(m.Curr_Bal AS NUMERIC(18,2)), m.NA_Status_Change
  FROM mom_diff m
)
SELECT * FROM detail_rows
UNION ALL SELECT * FROM summary_dpd_rows
UNION ALL SELECT * FROM summary_bal_rows
UNION ALL SELECT * FROM summary_bank_sys_rows
UNION ALL SELECT * FROM sanity_dupes_rows
UNION ALL SELECT * FROM sanity_group_rows
UNION ALL SELECT * FROM mom_rows
ORDER BY
  CASE Report_Section WHEN 'DETAIL' THEN 0 WHEN 'SUMMARY' THEN 1 WHEN 'SANITY' THEN 2 WHEN 'MOM' THEN 3 ELSE 9 END,
  Subsection NULLS LAST, Bank_Code NULLS LAST, Contract_Source_System NULLS LAST,
  Days_Past_Due_Bucket NULLS LAST, Balance_Bucket NULLS LAST, Account_Identifier NULLS LAST;






-- Build the final tall table in ONE statement (CTAS)
CREATE TEMP TABLE FINAL_NONACCRUAL_REPORT
DISTRIBUTE ON RANDOM
AS
WITH params AS (
  SELECT DATE '2025-07-31' AS curr_eom,
         ADD_MONTHS(DATE '2025-07-31', -1) AS prev_eom
),
pop_all AS (
  SELECT
      End_of_Month_Date,
      Bank_Code,
      Account_Name,
      Contract_Source_System,
      Customer_Number,
      Facility_ID,
      Account_Identifier,
      Account_Key,
      Status_Code_Description,
      Instrument_Type,
      Source_System_Balance,
      GL_Balance,
      Available_Balance,
      Borrower_Risk_Rating,
      PD_Grade,
      Days_Past_Due,
      Non_Accrual_Flag
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Source_System_Balance > 0
    AND End_of_Month_Date IN ((SELECT curr_eom FROM params),
                              (SELECT prev_eom FROM params))
),
curr_na AS (
  SELECT * FROM pop_all
  WHERE End_of_Month_Date = (SELECT curr_eom FROM params)
    AND Non_Accrual_Flag = 'Y'
),
prev_na AS (
  SELECT * FROM pop_all
  WHERE End_of_Month_Date = (SELECT prev_eom FROM params)
    AND Non_Accrual_Flag = 'Y'
),
enriched AS (
  SELECT
    c.*,
    CASE
      WHEN Days_Past_Due = 0 THEN 'Zero Days'
      WHEN Days_Past_Due BETWEEN 1 AND 30  THEN '1-30 Days'
      WHEN Days_Past_Due BETWEEN 31 AND 90 THEN '31-90 Days'
      WHEN Days_Past_Due BETWEEN 91 AND 180 THEN '91-180 Days'
      WHEN Days_Past_Due > 180 THEN '180+ Days'
      ELSE 'Unknown'
    END AS Days_Past_Due_Bucket,
    CASE
      WHEN Source_System_Balance < 250000 THEN '< $250k'
      WHEN Source_System_Balance < 500000 THEN '$250k - < $500k'
      ELSE '>= $500k'
    END AS Balance_Bucket
  FROM curr_na c
),
dupes AS (
  SELECT End_of_Month_Date, Account_Identifier, COUNT(*) AS dup_count
  FROM enriched
  GROUP BY 1,2
  HAVING COUNT(*) > 1
),
sanity_by_group AS (
  SELECT
    Bank_Code,
    Contract_Source_System,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS sum_source_bal,
    SUM(GL_Balance)            AS sum_gl_bal,
    SUM(CASE WHEN Days_Past_Due IS NULL THEN 1 ELSE 0 END) AS null_dpd,
    SUM(CASE WHEN COALESCE(TRIM(CAST(PD_Grade AS VARCHAR(50))), '') IN ('','NA') THEN 1 ELSE 0 END) AS missing_pd_grade,
    SUM(CASE WHEN ABS(GL_Balance - Source_System_Balance) > 1000 THEN 1 ELSE 0 END) AS gl_src_diff_gt_1k,
    SUM(CASE WHEN Days_Past_Due = 0 THEN 1 ELSE 0 END) AS dpd_zero
  FROM enriched
  GROUP BY 1,2
),
sum_by_dpd AS (
  SELECT Days_Past_Due_Bucket, COUNT(*) AS loans, SUM(Source_System_Balance) AS balance
  FROM enriched GROUP BY 1
),
sum_by_bal_bucket AS (
  SELECT Balance_Bucket, COUNT(*) AS loans, SUM(Source_System_Balance) AS balance
  FROM enriched GROUP BY 1
),
sum_by_bank_system AS (
  SELECT Bank_Code, Contract_Source_System, COUNT(*) AS loans, SUM(Source_System_Balance) AS balance
  FROM enriched GROUP BY 1,2
),
mom_diff AS (
  SELECT
    COALESCE(c.Account_Identifier, p.Account_Identifier) AS Account_Identifier,
    COALESCE(c.Account_Name,       p.Account_Name)       AS Account_Name,
    COALESCE(c.Bank_Code,          p.Bank_Code)          AS Bank_Code,
    COALESCE(c.Contract_Source_System, p.Contract_Source_System) AS Contract_Source_System,
    CASE
      WHEN p.Account_Identifier IS NULL AND c.Account_Identifier IS NOT NULL THEN 'Added (New NA)'
      WHEN c.Account_Identifier IS NULL AND p.Account_Identifier IS NOT NULL THEN 'Removed (Resolved/Out)'
      ELSE 'Persisting'
    END AS NA_Status_Change,
    p.Source_System_Balance AS Prev_Bal,
    c.Source_System_Balance AS Curr_Bal
  FROM curr_na c
  FULL OUTER JOIN prev_na p
    ON c.Account_Identifier = p.Account_Identifier
),
/* ---- Normalize each section to the same 32 columns ---- */
detail_rows AS (
  SELECT
    'DETAIL'::VARCHAR(24)       AS Report_Section,
    NULL::VARCHAR(64)           AS Subsection,
    e.End_of_Month_Date,
    e.Bank_Code,
    e.Account_Name,
    e.Contract_Source_System,
    e.Customer_Number,
    e.Facility_ID,
    e.Account_Identifier,
    e.Account_Key,
    e.Status_Code_Description,
    e.Instrument_Type,
    CAST(e.Source_System_Balance AS NUMERIC(18,2)),
    CAST(e.GL_Balance AS NUMERIC(18,2)),
    CAST(e.Available_Balance AS NUMERIC(18,2)),
    e.Borrower_Risk_Rating,
    CAST(e.PD_Grade AS VARCHAR(50)),
    e.Days_Past_Due,
    e.Non_Accrual_Flag,
    e.Days_Past_Due_Bucket,
    e.Balance_Bucket,
    NULL::INTEGER               AS Loans,
    NULL::NUMERIC(18,2)         AS Balance_Sum,
    NULL::NUMERIC(18,2)         AS GL_Source_Diff_Sum,
    NULL::INTEGER               AS Dup_Count,
    NULL::INTEGER               AS Null_DPD,
    NULL::INTEGER               AS Missing_PD_Grade,
    NULL::INTEGER               AS GL_SRC_Diff_GT_1k,
    NULL::INTEGER               AS DPD_Zero,
    NULL::NUMERIC(18,2)         AS Prev_Bal,
    NULL::NUMERIC(18,2)         AS Curr_Bal,
    NULL::VARCHAR(40)           AS NA_Status_Change
  FROM enriched e
),
summary_dpd_rows AS (
  SELECT
    'SUMMARY', 'By DPD Bucket',
    NULL::DATE, NULL::VARCHAR(10), NULL::VARCHAR(200), NULL::VARCHAR(40),
    NULL::VARCHAR(40), NULL::VARCHAR(40), NULL::VARCHAR(60), NULL::VARCHAR(60),
    NULL::VARCHAR(200), NULL::VARCHAR(80),
    NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::NUMERIC(18,2),
    NULL::VARCHAR(40), NULL::VARCHAR(50), NULL::INTEGER, NULL::VARCHAR(1),
    s.Days_Past_Due_Bucket, NULL::VARCHAR(32),
    s.loans, CAST(s.balance AS NUMERIC(18,2)),
    NULL::NUMERIC(18,2), NULL::INTEGER, NULL::INTEGER, NULL::INTEGER, NULL::INTEGER,
    NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::VARCHAR(40)
  FROM sum_by_dpd s
),
summary_bal_rows AS (
  SELECT
    'SUMMARY', 'By Balance Bucket',
    NULL::DATE, NULL::VARCHAR(10), NULL::VARCHAR(200), NULL::VARCHAR(40),
    NULL::VARCHAR(40), NULL::VARCHAR(40), NULL::VARCHAR(60), NULL::VARCHAR(60),
    NULL::VARCHAR(200), NULL::VARCHAR(80),
    NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::NUMERIC(18,2),
    NULL::VARCHAR(40), NULL::VARCHAR(50), NULL::INTEGER, NULL::VARCHAR(1),
    NULL::VARCHAR(32), s.Balance_Bucket,
    s.loans, CAST(s.balance AS NUMERIC(18,2)),
    NULL::NUMERIC(18,2), NULL::INTEGER, NULL::INTEGER, NULL::INTEGER, NULL::INTEGER,
    NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::VARCHAR(40)
  FROM sum_by_bal_bucket s
),
summary_bank_sys_rows AS (
  SELECT
    'SUMMARY', 'By Bank × System',
    NULL::DATE, s.Bank_Code, NULL::VARCHAR(200), s.Contract_Source_System,
    NULL::VARCHAR(40), NULL::VARCHAR(40), NULL::VARCHAR(60), NULL::VARCHAR(60),
    NULL::VARCHAR(200), NULL::VARCHAR(80),
    NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::NUMERIC(18,2),
    NULL::VARCHAR(40), NULL::VARCHAR(50), NULL::INTEGER, NULL::VARCHAR(1),
    NULL::VARCHAR(32), NULL::VARCHAR(32),
    s.loans, CAST(s.balance AS NUMERIC(18,2)),
    NULL::NUMERIC(18,2), NULL::INTEGER, NULL::INTEGER, NULL::INTEGER, NULL::INTEGER,
    NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::VARCHAR(40)
  FROM sum_by_bank_system s
),
sanity_dupes_rows AS (
  SELECT
    'SANITY', 'Dupes: EOM + Account_Identifier',
    d.End_of_Month_Date, NULL::VARCHAR(10), NULL::VARCHAR(200), NULL::VARCHAR(40),
    NULL::VARCHAR(40), NULL::VARCHAR(40), d.Account_Identifier, NULL::VARCHAR(60),
    NULL::VARCHAR(200), NULL::VARCHAR(80),
    NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::NUMERIC(18,2),
    NULL::VARCHAR(40), NULL::VARCHAR(50), NULL::INTEGER, NULL::VARCHAR(1),
    NULL::VARCHAR(32), NULL::VARCHAR(32),
    NULL::INTEGER, NULL::NUMERIC(18,2), NULL::NUMERIC(18,2),
    d.dup_count, NULL::INTEGER, NULL::INTEGER, NULL::INTEGER,
    NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::VARCHAR(40)
  FROM dupes d
),
sanity_group_rows AS (
  SELECT
    'SANITY', 'Group Quality: Bank × System',
    NULL::DATE, s.Bank_Code, NULL::VARCHAR(200), s.Contract_Source_System,
    NULL::VARCHAR(40), NULL::VARCHAR(40), NULL::VARCHAR(60), NULL::VARCHAR(60),
    NULL::VARCHAR(200), NULL::VARCHAR(80),
    NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::NUMERIC(18,2),
    NULL::VARCHAR(40), NULL::VARCHAR(50), NULL::INTEGER, NULL::VARCHAR(1),
    NULL::VARCHAR(32), NULL::VARCHAR(32),
    s.loans, NULL::NUMERIC(18,2),
    CAST(s.sum_gl_bal - s.sum_source_bal AS NUMERIC(18,2)) AS GL_Source_Diff_Sum,
    NULL::INTEGER, s.null_dpd, s.missing_pd_grade, s.gl_src_diff_gt_1k, s.dpd_zero,
    NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::VARCHAR(40)
  FROM sanity_by_group s
),
mom_rows AS (
  SELECT
    'MOM', 'Adds/Drops/Persisting',
    NULL::DATE, m.Bank_Code, m.Account_Name, m.Contract_Source_System,
    NULL::VARCHAR(40), NULL::VARCHAR(40), m.Account_Identifier, NULL::VARCHAR(60),
    NULL::VARCHAR(200), NULL::VARCHAR(80),
    NULL::NUMERIC(18,2), NULL::NUMERIC(18,2), NULL::NUMERIC(18,2),
    NULL::VARCHAR(40), NULL::VARCHAR(50), NULL::INTEGER, NULL::VARCHAR(1),
    NULL::VARCHAR(32), NULL::VARCHAR(32),
    NULL::INTEGER, NULL::NUMERIC(18,2), NULL::NUMERIC(18,2),
    NULL::INTEGER, NULL::INTEGER, NULL::INTEGER, NULL::INTEGER,
    CAST(m.Prev_Bal AS NUMERIC(18,2)), CAST(m.Curr_Bal AS NUMERIC(18,2)), m.NA_Status_Change
  FROM mom_diff m
)
/* Final UNION inside the CTAS (no ORDER BY here) */
SELECT * FROM detail_rows
UNION ALL SELECT * FROM summary_dpd_rows
UNION ALL SELECT * FROM summary_bal_rows
UNION ALL SELECT * FROM summary_bank_sys_rows
UNION ALL SELECT * FROM sanity_dupes_rows
UNION ALL SELECT * FROM sanity_group_rows
UNION ALL SELECT * FROM mom_rows
;





-- Make sure the table doesn't exist (ignore error if it does)
DROP TABLE IF EXISTS FINAL_NONACCRUAL_REPORT;

-- Create the final temp table with explicit schema (32 columns)
CREATE TEMP TABLE FINAL_NONACCRUAL_REPORT
DISTRIBUTE ON RANDOM
AS
SELECT
  CAST(NULL AS VARCHAR(24))   AS Report_Section,
  CAST(NULL AS VARCHAR(64))   AS Subsection,
  CAST(NULL AS DATE)          AS End_of_Month_Date,
  CAST(NULL AS VARCHAR(10))   AS Bank_Code,
  CAST(NULL AS VARCHAR(200))  AS Account_Name,
  CAST(NULL AS VARCHAR(40))   AS Contract_Source_System,
  CAST(NULL AS VARCHAR(40))   AS Customer_Number,
  CAST(NULL AS VARCHAR(40))   AS Facility_ID,
  CAST(NULL AS VARCHAR(60))   AS Account_Identifier,
  CAST(NULL AS VARCHAR(60))   AS Account_Key,
  CAST(NULL AS VARCHAR(200))  AS Status_Code_Description,
  CAST(NULL AS VARCHAR(80))   AS Instrument_Type,
  CAST(NULL AS NUMERIC(18,2)) AS Source_System_Balance,
  CAST(NULL AS NUMERIC(18,2)) AS GL_Balance,
  CAST(NULL AS NUMERIC(18,2)) AS Available_Balance,
  CAST(NULL AS VARCHAR(40))   AS Borrower_Risk_Rating,
  CAST(NULL AS VARCHAR(50))   AS PD_Grade,
  CAST(NULL AS INTEGER)       AS Days_Past_Due,
  CAST(NULL AS VARCHAR(1))    AS Non_Accrual_Flag,
  CAST(NULL AS VARCHAR(32))   AS Days_Past_Due_Bucket,
  CAST(NULL AS VARCHAR(32))   AS Balance_Bucket,
  CAST(NULL AS INTEGER)       AS Loans,
  CAST(NULL AS NUMERIC(18,2)) AS Balance_Sum,
  CAST(NULL AS NUMERIC(18,2)) AS GL_Source_Diff_Sum,
  CAST(NULL AS INTEGER)       AS Dup_Count,
  CAST(NULL AS INTEGER)       AS Null_DPD,
  CAST(NULL AS INTEGER)       AS Missing_PD_Grade,
  CAST(NULL AS INTEGER)       AS GL_SRC_Diff_GT_1k,
  CAST(NULL AS INTEGER)       AS DPD_Zero,
  CAST(NULL AS NUMERIC(18,2)) AS Prev_Bal,
  CAST(NULL AS NUMERIC(18,2)) AS Curr_Bal,
  CAST(NULL AS VARCHAR(40))   AS NA_Status_Change
WITH NO DATA;

-- 1) DETAIL rows
INSERT INTO FINAL_NONACCRUAL_REPORT
SELECT
  'DETAIL',
  NULL,
  e.End_of_Month_Date,
  e.Bank_Code,
  e.Account_Name,
  e.Contract_Source_System,
  e.Customer_Number,
  e.Facility_ID,
  e.Account_Identifier,
  e.Account_Key,
  e.Status_Code_Description,
  e.Instrument_Type,
  CAST(e.Source_System_Balance AS NUMERIC(18,2)),
  CAST(e.GL_Balance AS NUMERIC(18,2)),
  CAST(e.Available_Balance AS NUMERIC(18,2)),
  e.Borrower_Risk_Rating,
  CAST(e.PD_Grade AS VARCHAR(50)),
  e.Days_Past_Due,
  e.Non_Accrual_Flag,
  e.Days_Past_Due_Bucket,
  e.Balance_Bucket,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL
FROM enriched e;

-- 2a) SUMMARY: By DPD bucket
INSERT INTO FINAL_NONACCRUAL_REPORT
SELECT
  'SUMMARY',
  'By DPD Bucket',
  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
  NULL, NULL, NULL, NULL, NULL, NULL, NULL,
  s.Days_Past_Due_Bucket,
  NULL,
  s.loans,
  CAST(s.balance AS NUMERIC(18,2)),
  NULL, NULL, NULL, NULL, NULL,
  NULL, NULL,
  NULL
FROM sum_by_dpd s;

-- 2b) SUMMARY: By Balance bucket
INSERT INTO FINAL_NONACCRUAL_REPORT
SELECT
  'SUMMARY',
  'By Balance Bucket',
  NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
  NULL, NULL, NULL, NULL, NULL, NULL, NULL,
  NULL,
  s.Balance_Bucket,
  s.loans,
  CAST(s.balance AS NUMERIC(18,2)),
  NULL, NULL, NULL, NULL, NULL,
  NULL, NULL,
  NULL
FROM sum_by_bal_bucket s;

-- 2c) SUMMARY: By Bank × System
INSERT INTO FINAL_NONACCRUAL_REPORT
SELECT
  'SUMMARY',
  'By Bank × System',
  NULL,
  s.Bank_Code,
  NULL,
  s.Contract_Source_System,
  NULL, NULL, NULL, NULL, NULL, NULL,
  NULL, NULL, NULL, NULL, NULL, NULL, NULL,
  NULL, NULL,
  s.loans,
  CAST(s.balance AS NUMERIC(18,2)),
  NULL, NULL, NULL, NULL, NULL,
  NULL, NULL,
  NULL
FROM sum_by_bank_system s;

-- 3a) SANITY: Dupes
INSERT INTO FINAL_NONACCRUAL_REPORT
SELECT
  'SANITY',
  'Dupes: EOM + Account_Identifier',
  d.End_of_Month_Date,
  NULL, NULL, NULL, NULL, NULL,
  d.Account_Identifier,
  NULL, NULL, NULL,
  NULL, NULL, NULL, NULL, NULL, NULL, NULL,
  NULL, NULL,
  NULL, NULL,
  d.dup_count,
  NULL, NULL, NULL, NULL,
  NULL, NULL,
  NULL
FROM dupes d;

-- 3b) SANITY: Group Quality
INSERT INTO FINAL_NONACCRUAL_REPORT
SELECT
  'SANITY',
  'Group Quality: Bank × System',
  NULL,
  s.Bank_Code,
  NULL,
  s.Contract_Source_System,
  NULL, NULL, NULL, NULL, NULL, NULL,
  NULL, NULL, NULL, NULL, NULL, NULL, NULL,
  NULL, NULL,
  s.loans,
  NULL,
  CAST(s.sum_gl_bal - s.sum_source_bal AS NUMERIC(18,2)) AS GL_Source_Diff_Sum,
  NULL,
  s.null_dpd,
  s.missing_pd_grade,
  s.gl_src_diff_gt_1k,
  s.dpd_zero,
  NULL, NULL,
  NULL
FROM sanity_by_group s;

-- 4) MOM: Adds / Drops / Persisting
INSERT INTO FINAL_NONACCRUAL_REPORT
SELECT
  'MOM',
  'Adds/Drops/Persisting',
  NULL,
  m.Bank_Code,
  m.Account_Name,
  m.Contract_Source_System,
  NULL, NULL,
  m.Account_Identifier,
  NULL, NULL, NULL,
  NULL, NULL, NULL, NULL, NULL, NULL, NULL,
  NULL, NULL,
  NULL, NULL, NULL, NULL, NULL, NULL, NULL,
  CAST(m.Prev_Bal AS NUMERIC(18,2)),
  CAST(m.Curr_Bal AS NUMERIC(18,2)),
  m.NA_Status_Change
FROM mom_diff m;

-- Final single result
SELECT *
FROM FINAL_NONACCRUAL_REPORT
ORDER BY
  CASE Report_Section
    WHEN 'DETAIL'  THEN 0
    WHEN 'SUMMARY' THEN 1
    WHEN 'SANITY'  THEN 2
    WHEN 'MOM'     THEN 3
    ELSE 9
  END,
  Subsection NULLS LAST,
  Bank_Code NULLS LAST,
  Contract_Source_System NULLS LAST,
  Days_Past_Due_Bucket NULLS LAST,
  Balance_Bucket NULLS LAST,
  Account_Identifier NULLS LAST;







/* ============================================================
   3-Way Non-Accrual Reconciliation — Single Tall Result (32 cols)
   Approach: CREATE TEMP TABLE + INSERT for each section
   Target: Netezza
   ============================================================ */

-- Parameters
WITH params AS (
  SELECT
    DATE '2025-07-31'                  AS curr_eom,
    ADD_MONTHS(DATE '2025-07-31', -1)  AS prev_eom
),

-- Raw population (current & prior)
pop_all AS (
  SELECT
      End_of_Month_Date,
      Bank_Code,
      Account_Name,
      Contract_Source_System,
      Customer_Number,
      Facility_ID,
      Account_Identifier,
      Account_Key,
      Status_Code_Description,
      Instrument_Type,
      Source_System_Balance,
      GL_Balance,
      Available_Balance,
      Borrower_Risk_Rating,
      PD_Grade,
      Days_Past_Due,
      Non_Accrual_Flag
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Source_System_Balance > 0
    AND End_of_Month_Date IN (
          (SELECT curr_eom FROM params),
          (SELECT prev_eom FROM params)
        )
),

curr_na AS (
  SELECT *
  FROM pop_all
  WHERE End_of_Month_Date = (SELECT curr_eom FROM params)
    AND Non_Accrual_Flag = 'Y'
),

prev_na AS (
  SELECT *
  FROM pop_all
  WHERE End_of_Month_Date = (SELECT prev_eom FROM params)
    AND Non_Accrual_Flag = 'Y'
),

-- Enrich with buckets (current)
enriched AS (
  SELECT
    c.*,
    CASE
      WHEN Days_Past_Due = 0 THEN 'Zero Days'
      WHEN Days_Past_Due BETWEEN 1  AND 30  THEN '1-30 Days'
      WHEN Days_Past_Due BETWEEN 31 AND 90  THEN '31-90 Days'
      WHEN Days_Past_Due BETWEEN 91 AND 180 THEN '91-180 Days'
      WHEN Days_Past_Due > 180 THEN '180+ Days'
      ELSE 'Unknown'
    END AS Days_Past_Due_Bucket,
    CASE
      WHEN Source_System_Balance < 250000 THEN '< $250k'
      WHEN Source_System_Balance < 500000 THEN '$250k - < $500k'
      ELSE '>= $500k'
    END AS Balance_Bucket
  FROM curr_na c
),

-- Sanity helpers
dupes AS (
  SELECT
    End_of_Month_Date,
    Account_Identifier,
    COUNT(*) AS dup_count
  FROM enriched
  GROUP BY 1,2
  HAVING COUNT(*) > 1
),

sanity_by_group AS (
  SELECT
    Bank_Code,
    Contract_Source_System,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS sum_source_bal,
    SUM(GL_Balance)            AS sum_gl_bal,
    SUM(CASE WHEN Days_Past_Due IS NULL THEN 1 ELSE 0 END) AS null_dpd,
    SUM(CASE WHEN COALESCE(TRIM(CAST(PD_Grade AS VARCHAR(50))), '') IN ('','NA') THEN 1 ELSE 0 END) AS missing_pd_grade,
    SUM(CASE WHEN ABS(GL_Balance - Source_System_Balance) > 1000 THEN 1 ELSE 0 END) AS gl_src_diff_gt_1k,
    SUM(CASE WHEN Days_Past_Due = 0 THEN 1 ELSE 0 END) AS dpd_zero
  FROM enriched
  GROUP BY 1,2
),

-- Summaries
sum_by_dpd AS (
  SELECT
    Days_Past_Due_Bucket,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS balance
  FROM enriched
  GROUP BY 1
),

sum_by_bal_bucket AS (
  SELECT
    Balance_Bucket,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS balance
  FROM enriched
  GROUP BY 1
),

sum_by_bank_system AS (
  SELECT
    Bank_Code,
    Contract_Source_System,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS balance
  FROM enriched
  GROUP BY 1,2
),

-- MoM adds/drops/persisting
mom_diff AS (
  SELECT
    COALESCE(c.Account_Identifier, p.Account_Identifier) AS Account_Identifier,
    COALESCE(c.Account_Name,       p.Account_Name)       AS Account_Name,
    COALESCE(c.Bank_Code,          p.Bank_Code)          AS Bank_Code,
    COALESCE(c.Contract_Source_System, p.Contract_Source_System) AS Contract_Source_System,
    CASE
      WHEN p.Account_Identifier IS NULL AND c.Account_Identifier IS NOT NULL THEN 'Added (New NA)'
      WHEN c.Account_Identifier IS NULL AND p.Account_Identifier IS NOT NULL THEN 'Removed (Resolved/Out)'
      ELSE 'Persisting'
    END AS NA_Status_Change,
    p.Source_System_Balance AS Prev_Bal,
    c.Source_System_Balance AS Curr_Bal
  FROM curr_na c
  FULL OUTER JOIN prev_na p
    ON c.Account_Identifier = p.Account_Identifier
)

-- ====== materialize temp table with fixed shape ======
SELECT 1;










WITH base AS (
  SELECT
      End_of_Month_Date,
      Bank_Code,
      Account_Name,
      Contract_Source_System,
      Customer_Number,
      Facility_ID,
      Account_Identifier,
      Account_Key,
      Status_Code_Description,
      Instrument_Type,
      Source_System_Balance,
      GL_Balance,
      Available_Balance,
      Borrower_Risk_Rating,
      PD_Grade,
      Days_Past_Due,
      Non_Accrual_Flag
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
),
bucketed AS (
  SELECT
      b.*,
      CASE
        WHEN Source_System_Balance < 250000 THEN '< $250k'
        WHEN Source_System_Balance < 500000 THEN '$250k–< $500k'
        ELSE '≥ $500k'
      END AS balance_bucket
  FROM base b
)
SELECT * FROM bucketed;



WITH base AS (
  SELECT *
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
),
bucketed AS (
  SELECT
      *,
      CASE
        WHEN Source_System_Balance < 250000 THEN '< $250k'
        WHEN Source_System_Balance < 500000 THEN '$250k–< $500k'
        ELSE '≥ $500k'
      END AS balance_bucket
  FROM base
)
SELECT
    balance_bucket,
    COUNT(*)                           AS loan_count,
    COUNT(DISTINCT Customer_Number)    AS borrower_count,
    SUM(Source_System_Balance)         AS total_source_system_balance
FROM bucketed
GROUP BY balance_bucket
ORDER BY MIN(CASE balance_bucket
               WHEN '< $250k' THEN 1
               WHEN '$250k–< $500k' THEN 2
               ELSE 3 END);



WITH base AS (
  SELECT *
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
),
bucketed AS (
  SELECT
      *,
      CASE
        WHEN Source_System_Balance < 250000 THEN '< $250k'
        WHEN Source_System_Balance < 500000 THEN '$250k–< $500k'
        ELSE '≥ $500k'
      END AS balance_bucket
  FROM base
)
SELECT
    Bank_Code,
    balance_bucket,
    COUNT(*)                           AS loan_count,
    COUNT(DISTINCT Customer_Number)    AS borrower_count,
    SUM(Source_System_Balance)         AS total_source_system_balance
FROM bucketed
GROUP BY Bank_Code, balance_bucket
ORDER BY Bank_Code,
         MIN(CASE balance_bucket
               WHEN '< $250k' THEN 1
               WHEN '$250k–< $500k' THEN 2
               ELSE 3 END);




WITH base AS (
  SELECT *
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
),
bucketed AS (
  SELECT
      *,
      CASE
        WHEN Source_System_Balance < 250000 THEN '< $250k'
        WHEN Source_System_Balance < 500000 THEN '$250k–< $500k'
        ELSE '≥ $500k'
      END AS balance_bucket
  FROM base
)
SELECT
    Contract_Source_System,
    balance_bucket,
    COUNT(*)                           AS loan_count,
    COUNT(DISTINCT Customer_Number)    AS borrower_count,
    SUM(Source_System_Balance)         AS total_source_system_balance
FROM bucketed
GROUP BY Contract_Source_System, balance_bucket
ORDER BY Contract_Source_System,
         MIN(CASE balance_bucket
               WHEN '< $250k' THEN 1
               WHEN '$250k–< $500k' THEN 2
               ELSE 3 END);



WITH base AS (
  SELECT *
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
)
SELECT
    End_of_Month_Date,
    Customer_Number                          AS borrower_id,
    MIN(Account_Name)                        AS borrower_name,     -- handy label
    COUNT(*)                                 AS loan_count,
    COUNT(DISTINCT Facility_ID)              AS facility_count,
    SUM(Source_System_Balance)               AS total_source_system_balance
FROM base
GROUP BY End_of_Month_Date, Customer_Number
ORDER BY total_source_system_balance DESC;




WITH base AS (
  SELECT *
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
)
SELECT
    End_of_Month_Date,
    Bank_Code,
    COUNT(DISTINCT Customer_Number)  AS borrower_count,
    COUNT(*)                         AS loan_count,
    SUM(Source_System_Balance)       AS total_source_system_balance
FROM base
GROUP BY End_of_Month_Date, Bank_Code
ORDER BY total_source_system_balance DESC;




WITH base AS (
  SELECT *
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
)
SELECT
    End_of_Month_Date,
    Contract_Source_System,
    COUNT(DISTINCT Customer_Number)  AS borrower_count,
    COUNT(*)                         AS loan_count,
    SUM(Source_System_Balance)       AS total_source_system_balance
FROM base
GROUP BY End_of_Month_Date, Contract_Source_System
ORDER BY total_source_system_balance DESC;





-- Unified extract (BANK + BANK_GL) for Total Loans only
-- Synthetic LJ within Application list:
--   ('ADJ','LIP','ALL','L-FCB SYN','LJ','GL','L-SVB SYN')

SELECT
    'BANK' AS Grain,
    END_OF_MONTH_DATE,
    -- Keep CONTRACT_SOURCE_SYSTEM at BANK grain if you want it visible; remove if not needed
    CONTRACT_SOURCE_SYSTEM,
    BANK_CODE,
    CAST(NULL AS VARCHAR(200)) AS GL_ACCOUNT,
    SUM(CASE WHEN SYNTHETIC_FLAG = 'Y' THEN GL_BALANCE ELSE 0 END) AS Synthetic,
    SUM(CASE WHEN SYNTHETIC_FLAG = 'N' THEN GL_BALANCE ELSE 0 END) AS Non_Synthetic,
    SUM(GL_BALANCE) AS Total_Balance,
    BANK_CODE AS Common_Key,
    CAST(NULL AS VARCHAR(200)) AS Common_Key2,
    CASE
        WHEN SUM(CASE WHEN CONTRACT_SOURCE_SYSTEM IN ('ADJ','LIP','ALL','L-FCB SYN','LJ','GL','L-SVB SYN') THEN 1 ELSE 0 END) > 0
        THEN 'Y' ELSE 'N'
    END AS Is_Synthetic_LJ_Within_App,
    SUM(CASE WHEN CONTRACT_SOURCE_SYSTEM IN ('ADJ','LIP','ALL','L-FCB SYN','LJ','GL','L-SVB SYN') THEN GL_BALANCE ELSE 0 END)
        AS Synthetic_LJ_App_Balance
FROM V_DPRT_CREDIT_INSTRUMENTS_ME
WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
  AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
GROUP BY END_OF_MONTH_DATE, CONTRACT_SOURCE_SYSTEM, BANK_CODE

UNION ALL

SELECT
    'BANK_GL' AS Grain,
    END_OF_MONTH_DATE,
    CAST(NULL AS VARCHAR(200)) AS CONTRACT_SOURCE_SYSTEM,
    BANK_CODE,
    GL_ACCOUNT,
    SUM(CASE WHEN SYNTHETIC_FLAG = 'Y' THEN GL_BALANCE ELSE 0 END) AS Synthetic,
    SUM(CASE WHEN SYNTHETIC_FLAG = 'N' THEN GL_BALANCE ELSE 0 END) AS Non_Synthetic,
    SUM(GL_BALANCE) AS Total_Balance,
    BANK_CODE AS Common_Key,
    GL_ACCOUNT AS Common_Key2,
    CASE
        WHEN SUM(CASE WHEN CONTRACT_SOURCE_SYSTEM IN ('ADJ','LIP','ALL','L-FCB SYN','LJ','GL','L-SVB SYN') THEN 1 ELSE 0 END) > 0
        THEN 'Y' ELSE 'N'
    END AS Is_Synthetic_LJ_Within_App,
    SUM(CASE WHEN CONTRACT_SOURCE_SYSTEM IN ('ADJ','LIP','ALL','L-FCB SYN','LJ','GL','L-SVB SYN') THEN GL_BALANCE ELSE 0 END)
        AS Synthetic_LJ_App_Balance
FROM V_DPRT_CREDIT_INSTRUMENTS_ME
WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
  AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
GROUP BY END_OF_MONTH_DATE, BANK_CODE, GL_ACCOUNT

ORDER BY 1, 2, 9, 10;  -- Grain, END_OF_MONTH_DATE, Common_Key, Common_Key2





// Controls (keep as-is or swap to What-If params)
Anom Window Months := 12
Anom Z Threshold   := 3.0
Anom Min $         := 250000
Anom Min Points    := 3   // require at least 3 months to compute z-score

// Helper: last selected EOM (or overall max if none selected)
Last EOM :=
VAR e = MAX ( 'MonthEnd'[EOM] )
RETURN IF ( ISBLANK(e), CALCULATE( MAX('MonthEnd'[EOM]), ALL('MonthEnd') ), e )

// Table of the last W month-ends up to Last EOM
Anom Window Table :=
VAR W = [Anom Window Months]
RETURN
DATESINPERIOD ( 'MonthEnd'[EOM], [Last EOM], -1 * W, MONTH )

// Build a vector of MoM % for that grain over the window (nonblank only)
Source MoM % Vector :=
VAR Win = [Anom Window Table]
RETURN
FILTER (
    ADDCOLUMNS (
        Win,
        "__x", CALCULATE ( [Source Delta %] )   // evaluated per EOM row at current grain
    ),
    NOT ISBLANK ( [__x] )
)

// Rolling mean & stdev over nonblank points only; require minimum points
Source MoM % Rolling Mean :=
VAR V = [Source MoM % Vector]
VAR N = COUNTROWS ( V )
RETURN IF ( N < [Anom Min Points], BLANK(), AVERAGEX ( V, [__x] ) )

Source MoM % Rolling StDev :=
VAR V = [Source MoM % Vector]
VAR N = COUNTROWS ( V )
RETURN IF ( N < [Anom Min Points], BLANK(), STDEVX.P ( V, [__x] ) )

// Z-score (absolute too)
Source MoM % Z :=
VAR mu = [Source MoM % Rolling Mean]
VAR sd = [Source MoM % Rolling StDev]
VAR x  = [Source Delta %]
RETURN IF ( ISBLANK(mu) || ISBLANK(sd) || sd = 0 || ISBLANK(x), BLANK(), ( x - mu ) / sd )

Source MoM % Z Abs :=
IF ( ISBLANK([Source MoM % Z]), BLANK(), ABS([Source MoM % Z]) )






WITH base AS (
  SELECT
      End_of_Month_Date,
      Bank_Code,
      Account_Name,
      Contract_Source_System,
      Customer_Number,
      Facility_ID,
      Account_Identifier,
      Account_Key,
      Status_Code_Description,
      Instrument_Type,
      Source_System_Balance,
      GL_Balance,
      Available_Balance,
      Borrower_Risk_Rating,
      PD_Grade,
      Days_Past_Due,
      Non_Accrual_Flag
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
    AND SOURCE_SYSTEM_BALANCE > '0'
),
bucketed AS (
  SELECT
      b.*,
      CASE
        WHEN Source_System_Balance < 250000 THEN '< $250k'
        WHEN Source_System_Balance < 500000 THEN '$250k–< $500k'
        ELSE '≥ $500k'
      END AS balance_bucket
  FROM base b
)
SELECT * FROM bucketed;




WITH base AS (
  SELECT
      End_of_Month_Date,
      Bank_Code,
      Account_Name,
      Contract_Source_System,
      Customer_Number,
      Facility_ID,
      Account_Identifier,
      Account_Key,
      Status_Code_Description,
      Instrument_Type,
      Source_System_Balance,
      GL_Balance,
      Available_Balance,
      Borrower_Risk_Rating,
      PD_Grade,
      Days_Past_Due,
      Non_Accrual_Flag
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
    AND Source_System_Balance > 0       -- numeric compare
),
bucketed AS (
  SELECT
      b.*,
      CASE
        WHEN Source_System_Balance < 250000 THEN '< $250k'
        WHEN Source_System_Balance < 500000 THEN '$250k–< $500k'
        ELSE '≥ $500k'
      END AS balance_bucket,
      CASE
        WHEN Days_Past_Due = 0 THEN 'Zero Days'
        WHEN Days_Past_Due BETWEEN 1 AND 30 THEN '1-30 Days'
        WHEN Days_Past_Due BETWEEN 31 AND 90 THEN '31-90 Days'
        WHEN Days_Past_Due BETWEEN 91 AND 180 THEN '91-180 Days'
        WHEN Days_Past_Due > 180 THEN '180+ Days'
        ELSE 'Unknown'  -- handles NULLs or unexpected values
      END AS days_past_due_bucket
  FROM base b
)
SELECT *
FROM bucketed;





/* ============================================
   3-Way Non-Accrual Reconciliation (Single Set)
   Output: one tall table with Report_Section
   Target: Netezza
   ============================================ */

WITH params AS (
  SELECT
    DATE '2025-07-31'                AS curr_eom,
    ADD_MONTHS(DATE '2025-07-31', -1) AS prev_eom
),

pop_all AS (
  SELECT
      End_of_Month_Date,
      Bank_Code,
      Account_Name,
      Contract_Source_System,
      Customer_Number,
      Facility_ID,
      Account_Identifier,
      Account_Key,
      Status_Code_Description,
      Instrument_Type,
      Source_System_Balance,
      GL_Balance,
      Available_Balance,
      Borrower_Risk_Rating,
      PD_Grade,
      Days_Past_Due,
      Non_Accrual_Flag
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Source_System_Balance > 0
    AND End_of_Month_Date IN (
          (SELECT curr_eom FROM params),
          (SELECT prev_eom FROM params)
        )
),

curr_na AS (
  SELECT *
  FROM pop_all
  WHERE End_of_Month_Date = (SELECT curr_eom FROM params)
    AND Non_Accrual_Flag = 'Y'
),

prev_na AS (
  SELECT *
  FROM pop_all
  WHERE End_of_Month_Date = (SELECT prev_eom FROM params)
    AND Non_Accrual_Flag = 'Y'
),

enriched AS (
  SELECT
    c.*,
    CASE
      WHEN Days_Past_Due = 0 THEN 'Zero Days'
      WHEN Days_Past_Due BETWEEN 1  AND 30  THEN '1-30 Days'
      WHEN Days_Past_Due BETWEEN 31 AND 90  THEN '31-90 Days'
      WHEN Days_Past_Due BETWEEN 91 AND 180 THEN '91-180 Days'
      WHEN Days_Past_Due > 180 THEN '180+ Days'
      ELSE 'Unknown'
    END AS Days_Past_Due_Bucket,
    CASE
      WHEN Source_System_Balance < 250000 THEN '< $250k'
      WHEN Source_System_Balance < 500000 THEN '$250k - < $500k'
      ELSE '>= $500k'
    END AS Balance_Bucket
  FROM curr_na c
),

dupes AS (
  SELECT
    End_of_Month_Date,
    Account_Identifier,
    COUNT(*) AS dup_count
  FROM enriched
  GROUP BY 1,2
  HAVING COUNT(*) > 1
),

sanity_by_group AS (
  SELECT
    Bank_Code,
    Contract_Source_System,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS sum_source_bal,
    SUM(GL_Balance)            AS sum_gl_bal,
    SUM(CASE WHEN Days_Past_Due IS NULL THEN 1 ELSE 0 END) AS null_dpd,
    SUM(CASE WHEN COALESCE(TRIM(CAST(PD_Grade AS VARCHAR(50))), '') IN ('','NA') THEN 1 ELSE 0 END) AS missing_pd_grade,
    SUM(CASE WHEN ABS(GL_Balance - Source_System_Balance) > 1000 THEN 1 ELSE 0 END) AS gl_src_diff_gt_1k,
    SUM(CASE WHEN Days_Past_Due = 0 THEN 1 ELSE 0 END) AS dpd_zero
  FROM enriched
  GROUP BY 1,2
),

sum_by_dpd AS (
  SELECT
    Days_Past_Due_Bucket,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS balance
  FROM enriched
  GROUP BY 1
),

sum_by_bal_bucket AS (
  SELECT
    Balance_Bucket,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS balance
  FROM enriched
  GROUP BY 1
),

sum_by_bank_system AS (
  SELECT
    Bank_Code,
    Contract_Source_System,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS balance
  FROM enriched
  GROUP BY 1,2
),

mom_diff AS (
  SELECT
    COALESCE(c.Account_Identifier, p.Account_Identifier) AS Account_Identifier,
    COALESCE(c.Account_Name,       p.Account_Name)       AS Account_Name,
    COALESCE(c.Bank_Code,          p.Bank_Code)          AS Bank_Code,
    COALESCE(c.Contract_Source_System, p.Contract_Source_System) AS Contract_Source_System,
    CASE
      WHEN p.Account_Identifier IS NULL AND c.Account_Identifier IS NOT NULL THEN 'Added (New NA)'
      WHEN c.Account_Identifier IS NULL AND p.Account_Identifier IS NOT NULL THEN 'Removed (Resolved/Out)'
      ELSE 'Persisting'
    END AS NA_Status_Change,
    p.Source_System_Balance AS Prev_Bal,
    c.Source_System_Balance AS Curr_Bal
  FROM curr_na c
  FULL OUTER JOIN prev_na p
    ON c.Account_Identifier = p.Account_Identifier
)

/* ============================================================
   SINGLE RESULT: UNION ALL of sections with common columns
   ============================================================ */
SELECT
  'DETAIL'::VARCHAR(24)          AS Report_Section,
  NULL::VARCHAR(64)              AS Subsection,
  e.End_of_Month_Date,
  e.Bank_Code,
  e.Account_Name,
  e.Contract_Source_System,
  e.Customer_Number,
  e.Facility_ID,
  e.Account_Identifier,
  e.Account_Key,
  e.Status_Code_Description,
  e.Instrument_Type,
  e.Source_System_Balance,
  e.GL_Balance,
  e.Available_Balance,
  e.Borrower_Risk_Rating,
  e.PD_Grade,
  e.Days_Past_Due,
  e.Non_Accrual_Flag,
  e.Days_Past_Due_Bucket,
  e.Balance_Bucket,
  /* summary/sanity/mom fields (NULL for detail) */
  NULL::INTEGER                  AS Loans,
  NULL::NUMERIC(18,2)            AS Balance_Sum,
  NULL::NUMERIC(18,2)            AS GL_Source_Diff_Sum,
  NULL::INTEGER                  AS Dup_Count,
  NULL::INTEGER                  AS Null_DPD,
  NULL::INTEGER                  AS Missing_PD_Grade,
  NULL::INTEGER                  AS GL_SRC_Diff_GT_1k,
  NULL::INTEGER                  AS DPD_Zero,
  NULL::NUMERIC(18,2)            AS Prev_Bal,
  NULL::NUMERIC(18,2)            AS Curr_Bal,
  NULL::VARCHAR(40)              AS NA_Status_Change
FROM enriched e

UNION ALL
SELECT
  'SUMMARY'::VARCHAR(24)         AS Report_Section,
  'By DPD Bucket'::VARCHAR(64)   AS Subsection,
  NULL::DATE,
  NULL::VARCHAR(10),
  NULL::VARCHAR(200),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::VARCHAR(60),
  NULL::VARCHAR(60),
  NULL::VARCHAR(200),
  NULL::VARCHAR(80),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::INTEGER,
  NULL::VARCHAR(1),
  s.Days_Past_Due_Bucket,
  NULL::VARCHAR(32),
  s.loans,
  s.balance AS Balance_Sum,
  NULL::NUMERIC(18,2),
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40)
FROM sum_by_dpd s

UNION ALL
SELECT
  'SUMMARY',
  'By Balance Bucket',
  NULL::DATE,
  NULL::VARCHAR(10),
  NULL::VARCHAR(200),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::VARCHAR(60),
  NULL::VARCHAR(60),
  NULL::VARCHAR(200),
  NULL::VARCHAR(80),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::INTEGER,
  NULL::VARCHAR(1),
  NULL::VARCHAR(32),
  s.Balance_Bucket,
  s.loans,
  s.balance AS Balance_Sum,
  NULL::NUMERIC(18,2),
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40)
FROM sum_by_bal_bucket s

UNION ALL
SELECT
  'SUMMARY',
  'By Bank × System',
  NULL::DATE,
  s.Bank_Code,
  NULL::VARCHAR(200),
  s.Contract_Source_System,
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::VARCHAR(60),
  NULL::VARCHAR(60),
  NULL::VARCHAR(200),
  NULL::VARCHAR(80),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::INTEGER,
  NULL::VARCHAR(1),
  NULL::VARCHAR(32),
  NULL::VARCHAR(32),
  s.loans,
  s.balance AS Balance_Sum,
  NULL::NUMERIC(18,2),
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40)
FROM sum_by_bank_system s

UNION ALL
SELECT
  'SANITY',
  'Dupes: EOM + Account_Identifier',
  d.End_of_Month_Date,
  NULL::VARCHAR(10),
  NULL::VARCHAR(200),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  d.Account_Identifier,
  NULL::VARCHAR(60),
  NULL::VARCHAR(200),
  NULL::VARCHAR(80),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::INTEGER,
  NULL::VARCHAR(1),
  NULL::VARCHAR(32),
  NULL::VARCHAR(32),
  NULL::INTEGER,
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  d.dup_count AS Dup_Count,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40)
FROM dupes d

UNION ALL
SELECT
  'SANITY',
  'Group Quality: Bank × System',
  NULL::DATE,
  s.Bank_Code,
  NULL::VARCHAR(200),
  s.Contract_Source_System,
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::VARCHAR(60),
  NULL::VARCHAR(60),
  NULL::VARCHAR(200),
  NULL::VARCHAR(80),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::INTEGER,
  NULL::VARCHAR(1),
  NULL::VARCHAR(32),
  NULL::VARCHAR(32),
  s.loans,
  NULL::NUMERIC(18,2),
  (s.sum_gl_bal - s.sum_source_bal) AS GL_Source_Diff_Sum,
  NULL::INTEGER,
  s.null_dpd      AS Null_DPD,
  s.missing_pd_grade AS Missing_PD_Grade,
  s.gl_src_diff_gt_1k AS GL_SRC_Diff_GT_1k,
  s.dpd_zero      AS DPD_Zero,
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40)
FROM sanity_by_group s

UNION ALL
SELECT
  'MOM',
  'Adds/Drops/Persisting',
  NULL::DATE,
  m.Bank_Code,
  m.Account_Name,
  m.Contract_Source_System,
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  m.Account_Identifier,
  NULL::VARCHAR(60),
  NULL::VARCHAR(200),
  NULL::VARCHAR(80),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::INTEGER,
  NULL::VARCHAR(1),
  NULL::VARCHAR(32),
  NULL::VARCHAR(32),
  NULL::INTEGER,
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  m.Prev_Bal,
  m.Curr_Bal,
  m.NA_Status_Change
FROM mom_diff m

ORDER BY
  /* tidy default sort: section order, then useful keys */
  CASE Report_Section
    WHEN 'DETAIL' THEN 0
    WHEN 'SUMMARY' THEN 1
    WHEN 'SANITY' THEN 2
    WHEN 'MOM' THEN 3
    ELSE 9
  END,
  Subsection NULLS LAST,
  Bank_Code NULLS LAST,
  Contract_Source_System NULLS LAST,
  Days_Past_Due_Bucket NULLS LAST,
  Balance_Bucket NULLS LAST,
  Account_Identifier NULLS LAST;






/* ============================================================
   3-Way Non-Accrual Reconciliation — Single Tall Result
   Netezza SQL — all UNION branches = 32 columns, same order
   ============================================================ */

WITH params AS (
  SELECT
    DATE '2025-07-31'                  AS curr_eom,
    ADD_MONTHS(DATE '2025-07-31', -1)  AS prev_eom
),

/* ---------- Raw population for current & prior EOM ---------- */
pop_all AS (
  SELECT
      End_of_Month_Date,
      Bank_Code,
      Account_Name,
      Contract_Source_System,
      Customer_Number,
      Facility_ID,
      Account_Identifier,
      Account_Key,
      Status_Code_Description,
      Instrument_Type,
      Source_System_Balance,
      GL_Balance,
      Available_Balance,
      Borrower_Risk_Rating,
      PD_Grade,
      Days_Past_Due,
      Non_Accrual_Flag
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Source_System_Balance > 0
    AND End_of_Month_Date IN (
          (SELECT curr_eom FROM params),
          (SELECT prev_eom FROM params)
        )
),

curr_na AS (
  SELECT *
  FROM pop_all
  WHERE End_of_Month_Date = (SELECT curr_eom FROM params)
    AND Non_Accrual_Flag = 'Y'
),

prev_na AS (
  SELECT *
  FROM pop_all
  WHERE End_of_Month_Date = (SELECT prev_eom FROM params)
    AND Non_Accrual_Flag = 'Y'
),

/* -------------------- Buckets (current) --------------------- */
enriched AS (
  SELECT
    c.*,
    CASE
      WHEN Days_Past_Due = 0 THEN 'Zero Days'
      WHEN Days_Past_Due BETWEEN 1  AND 30  THEN '1-30 Days'
      WHEN Days_Past_Due BETWEEN 31 AND 90  THEN '31-90 Days'
      WHEN Days_Past_Due BETWEEN 91 AND 180 THEN '91-180 Days'
      WHEN Days_Past_Due > 180 THEN '180+ Days'
      ELSE 'Unknown'
    END AS Days_Past_Due_Bucket,
    CASE
      WHEN Source_System_Balance < 250000 THEN '< $250k'
      WHEN Source_System_Balance < 500000 THEN '$250k - < $500k'
      ELSE '>= $500k'
    END AS Balance_Bucket
  FROM curr_na c
),

/* ---------------------- Sanity helpers ---------------------- */
dupes AS (
  SELECT
    End_of_Month_Date,
    Account_Identifier,
    COUNT(*) AS dup_count
  FROM enriched
  GROUP BY 1,2
  HAVING COUNT(*) > 1
),

sanity_by_group AS (
  SELECT
    Bank_Code,
    Contract_Source_System,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS sum_source_bal,
    SUM(GL_Balance)            AS sum_gl_bal,
    SUM(CASE WHEN Days_Past_Due IS NULL THEN 1 ELSE 0 END) AS null_dpd,
    SUM(CASE WHEN COALESCE(TRIM(CAST(PD_Grade AS VARCHAR(50))), '') IN ('','NA') THEN 1 ELSE 0 END) AS missing_pd_grade,
    SUM(CASE WHEN ABS(GL_Balance - Source_System_Balance) > 1000 THEN 1 ELSE 0 END) AS gl_src_diff_gt_1k,
    SUM(CASE WHEN Days_Past_Due = 0 THEN 1 ELSE 0 END) AS dpd_zero
  FROM enriched
  GROUP BY 1,2
),

/* ------------------------- Summaries ------------------------ */
sum_by_dpd AS (
  SELECT
    Days_Past_Due_Bucket,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS balance
  FROM enriched
  GROUP BY 1
),

sum_by_bal_bucket AS (
  SELECT
    Balance_Bucket,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS balance
  FROM enriched
  GROUP BY 1
),

sum_by_bank_system AS (
  SELECT
    Bank_Code,
    Contract_Source_System,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS balance
  FROM enriched
  GROUP BY 1,2
),

/* ----------------------- MoM status ------------------------- */
mom_diff AS (
  SELECT
    COALESCE(c.Account_Identifier, p.Account_Identifier) AS Account_Identifier,
    COALESCE(c.Account_Name,       p.Account_Name)       AS Account_Name,
    COALESCE(c.Bank_Code,          p.Bank_Code)          AS Bank_Code,
    COALESCE(c.Contract_Source_System, p.Contract_Source_System) AS Contract_Source_System,
    CASE
      WHEN p.Account_Identifier IS NULL AND c.Account_Identifier IS NOT NULL THEN 'Added (New NA)'
      WHEN c.Account_Identifier IS NULL AND p.Account_Identifier IS NOT NULL THEN 'Removed (Resolved/Out)'
      ELSE 'Persisting'
    END AS NA_Status_Change,
    p.Source_System_Balance AS Prev_Bal,
    c.Source_System_Balance AS Curr_Bal
  FROM curr_na c
  FULL OUTER JOIN prev_na p
    ON c.Account_Identifier = p.Account_Identifier
)

/* ==================================================================
   SINGLE RESULT SET (32 columns) — every SELECT matches this layout:
   01 Report_Section (VARCHAR)
   02 Subsection (VARCHAR)
   03 End_of_Month_Date (DATE)
   04 Bank_Code (VARCHAR)
   05 Account_Name (VARCHAR)
   06 Contract_Source_System (VARCHAR)
   07 Customer_Number (VARCHAR)
   08 Facility_ID (VARCHAR)
   09 Account_Identifier (VARCHAR)
   10 Account_Key (VARCHAR)
   11 Status_Code_Description (VARCHAR)
   12 Instrument_Type (VARCHAR)
   13 Source_System_Balance (NUMERIC)
   14 GL_Balance (NUMERIC)
   15 Available_Balance (NUMERIC)
   16 Borrower_Risk_Rating (VARCHAR)
   17 PD_Grade (VARCHAR)
   18 Days_Past_Due (INTEGER)
   19 Non_Accrual_Flag (VARCHAR)
   20 Days_Past_Due_Bucket (VARCHAR)
   21 Balance_Bucket (VARCHAR)
   22 Loans (INTEGER)
   23 Balance_Sum (NUMERIC)
   24 GL_Source_Diff_Sum (NUMERIC)
   25 Dup_Count (INTEGER)
   26 Null_DPD (INTEGER)
   27 Missing_PD_Grade (INTEGER)
   28 GL_SRC_Diff_GT_1k (INTEGER)
   29 DPD_Zero (INTEGER)
   30 Prev_Bal (NUMERIC)
   31 Curr_Bal (NUMERIC)
   32 NA_Status_Change (VARCHAR)
   ================================================================== */

SELECT
  'DETAIL'::VARCHAR(24)        AS Report_Section,
  NULL::VARCHAR(64)            AS Subsection,
  e.End_of_Month_Date,
  e.Bank_Code,
  e.Account_Name,
  e.Contract_Source_System,
  e.Customer_Number,
  e.Facility_ID,
  e.Account_Identifier,
  e.Account_Key,
  e.Status_Code_Description,
  e.Instrument_Type,
  e.Source_System_Balance,
  e.GL_Balance,
  e.Available_Balance,
  e.Borrower_Risk_Rating,
  CAST(e.PD_Grade AS VARCHAR(50)) AS PD_Grade,
  e.Days_Past_Due,
  e.Non_Accrual_Flag,
  e.Days_Past_Due_Bucket,
  e.Balance_Bucket,
  NULL::INTEGER                AS Loans,
  NULL::NUMERIC(18,2)          AS Balance_Sum,
  NULL::NUMERIC(18,2)          AS GL_Source_Diff_Sum,
  NULL::INTEGER                AS Dup_Count,
  NULL::INTEGER                AS Null_DPD,
  NULL::INTEGER                AS Missing_PD_Grade,
  NULL::INTEGER                AS GL_SRC_Diff_GT_1k,
  NULL::INTEGER                AS DPD_Zero,
  NULL::NUMERIC(18,2)          AS Prev_Bal,
  NULL::NUMERIC(18,2)          AS Curr_Bal,
  NULL::VARCHAR(40)            AS NA_Status_Change
FROM enriched e

UNION ALL
SELECT
  'SUMMARY'::VARCHAR(24),
  'By DPD Bucket'::VARCHAR(64),
  NULL::DATE,
  NULL::VARCHAR(10),
  NULL::VARCHAR(200),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::VARCHAR(60),
  NULL::VARCHAR(60),
  NULL::VARCHAR(200),
  NULL::VARCHAR(80),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40),
  NULL::VARCHAR(50),
  NULL::INTEGER,
  NULL::VARCHAR(1),
  s.Days_Past_Due_Bucket,
  NULL::VARCHAR(32),
  s.loans,
  s.balance,
  NULL::NUMERIC(18,2),
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40)
FROM sum_by_dpd s

UNION ALL
SELECT
  'SUMMARY'::VARCHAR(24),
  'By Balance Bucket'::VARCHAR(64),
  NULL::DATE,
  NULL::VARCHAR(10),
  NULL::VARCHAR(200),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::VARCHAR(60),
  NULL::VARCHAR(60),
  NULL::VARCHAR(200),
  NULL::VARCHAR(80),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40),
  NULL::VARCHAR(50),
  NULL::INTEGER,
  NULL::VARCHAR(1),
  NULL::VARCHAR(32),
  s.Balance_Bucket,
  s.loans,
  s.balance,
  NULL::NUMERIC(18,2),
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40)
FROM sum_by_bal_bucket s

UNION ALL
SELECT
  'SUMMARY'::VARCHAR(24),
  'By Bank × System'::VARCHAR(64),
  NULL::DATE,
  s.Bank_Code,
  NULL::VARCHAR(200),
  s.Contract_Source_System,
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::VARCHAR(60),
  NULL::VARCHAR(60),
  NULL::VARCHAR(200),
  NULL::VARCHAR(80),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40),
  NULL::VARCHAR(50),
  NULL::INTEGER,
  NULL::VARCHAR(1),
  NULL::VARCHAR(32),
  NULL::VARCHAR(32),
  s.loans,
  s.balance,
  NULL::NUMERIC(18,2),
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40)
FROM sum_by_bank_system s

UNION ALL
SELECT
  'SANITY'::VARCHAR(24),
  'Dupes: EOM + Account_Identifier'::VARCHAR(64),
  d.End_of_Month_Date,
  NULL::VARCHAR(10),
  NULL::VARCHAR(200),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  d.Account_Identifier,
  NULL::VARCHAR(60),
  NULL::VARCHAR(200),
  NULL::VARCHAR(80),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40),
  NULL::VARCHAR(50),
  NULL::INTEGER,
  NULL::VARCHAR(1),
  NULL::VARCHAR(32),
  NULL::VARCHAR(32),
  NULL::INTEGER,
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  d.dup_count,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40)
FROM dupes d

UNION ALL
SELECT
  'SANITY'::VARCHAR(24),
  'Group Quality: Bank × System'::VARCHAR(64),
  NULL::DATE,
  s.Bank_Code,
  NULL::VARCHAR(200),
  s.Contract_Source_System,
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  NULL::VARCHAR(60),
  NULL::VARCHAR(60),
  NULL::VARCHAR(200),
  NULL::VARCHAR(80),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40),
  NULL::VARCHAR(50),
  NULL::INTEGER,
  NULL::VARCHAR(1),
  NULL::VARCHAR(32),
  NULL::VARCHAR(32),
  s.loans,
  NULL::NUMERIC(18,2),
  (s.sum_gl_bal - s.sum_source_bal) AS GL_Source_Diff_Sum,
  NULL::INTEGER,
  s.null_dpd,
  s.missing_pd_grade,
  s.gl_src_diff_gt_1k,
  s.dpd_zero,
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40)
FROM sanity_by_group s

UNION ALL
SELECT
  'MOM'::VARCHAR(24),
  'Adds/Drops/Persisting'::VARCHAR(64),
  NULL::DATE,
  m.Bank_Code,
  m.Account_Name,
  m.Contract_Source_System,
  NULL::VARCHAR(40),
  NULL::VARCHAR(40),
  m.Account_Identifier,
  NULL::VARCHAR(60),
  NULL::VARCHAR(200),
  NULL::VARCHAR(80),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::VARCHAR(40),
  NULL::VARCHAR(50),
  NULL::INTEGER,
  NULL::VARCHAR(1),
  NULL::VARCHAR(32),
  NULL::VARCHAR(32),
  NULL::INTEGER,
  NULL::NUMERIC(18,2),
  NULL::NUMERIC(18,2),
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  NULL::INTEGER,
  m.Prev_Bal,
  m.Curr_Bal,
  m.NA_Status_Change
FROM mom_diff m

ORDER BY
  CASE Report_Section
    WHEN 'DETAIL'  THEN 0
    WHEN 'SUMMARY' THEN 1
    WHEN 'SANITY'  THEN 2
    WHEN 'MOM'     THEN 3
    ELSE 9
  END,
  Subsection NULLS LAST,
  Bank_Code NULLS LAST,
  Contract_Source_System NULLS LAST,
  Days_Past_Due_Bucket NULLS LAST,
  Balance_Bucket NULLS LAST,
  Account_Identifier NULLS LAST;






/* ============================================================
   3-Way Non-Accrual Reconciliation — Single Tall Result (32 cols)
   Netezza SQL
   ============================================================ */
WITH params AS (
  SELECT
    DATE '2025-07-31'                  AS curr_eom,
    ADD_MONTHS(DATE '2025-07-31', -1)  AS prev_eom
),

/* ---------- Raw population for current & prior EOM ---------- */
pop_all AS (
  SELECT
      End_of_Month_Date,
      Bank_Code,
      Account_Name,
      Contract_Source_System,
      Customer_Number,
      Facility_ID,
      Account_Identifier,
      Account_Key,
      Status_Code_Description,
      Instrument_Type,
      Source_System_Balance,
      GL_Balance,
      Available_Balance,
      Borrower_Risk_Rating,
      PD_Grade,
      Days_Past_Due,
      Non_Accrual_Flag
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Source_System_Balance > 0
    AND End_of_Month_Date IN (
          (SELECT curr_eom FROM params),
          (SELECT prev_eom FROM params)
        )
),

curr_na AS (
  SELECT *
  FROM pop_all
  WHERE End_of_Month_Date = (SELECT curr_eom FROM params)
    AND Non_Accrual_Flag = 'Y'
),

prev_na AS (
  SELECT *
  FROM pop_all
  WHERE End_of_Month_Date = (SELECT prev_eom FROM params)
    AND Non_Accrual_Flag = 'Y'
),

/* -------------------- Buckets (current) --------------------- */
enriched AS (
  SELECT
    c.*,
    CASE
      WHEN Days_Past_Due = 0 THEN 'Zero Days'
      WHEN Days_Past_Due BETWEEN 1  AND 30  THEN '1-30 Days'
      WHEN Days_Past_Due BETWEEN 31 AND 90  THEN '31-90 Days'
      WHEN Days_Past_Due BETWEEN 91 AND 180 THEN '91-180 Days'
      WHEN Days_Past_Due > 180 THEN '180+ Days'
      ELSE 'Unknown'
    END AS Days_Past_Due_Bucket,
    CASE
      WHEN Source_System_Balance < 250000 THEN '< $250k'
      WHEN Source_System_Balance < 500000 THEN '$250k - < $500k'
      ELSE '>= $500k'
    END AS Balance_Bucket
  FROM curr_na c
),

/* ---------------------- Sanity helpers ---------------------- */
dupes AS (
  SELECT
    End_of_Month_Date,
    Account_Identifier,
    COUNT(*) AS dup_count
  FROM enriched
  GROUP BY 1,2
  HAVING COUNT(*) > 1
),

sanity_by_group AS (
  SELECT
    Bank_Code,
    Contract_Source_System,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS sum_source_bal,
    SUM(GL_Balance)            AS sum_gl_bal,
    SUM(CASE WHEN Days_Past_Due IS NULL THEN 1 ELSE 0 END) AS null_dpd,
    SUM(CASE WHEN COALESCE(TRIM(CAST(PD_Grade AS VARCHAR(50))), '') IN ('','NA') THEN 1 ELSE 0 END) AS missing_pd_grade,
    SUM(CASE WHEN ABS(GL_Balance - Source_System_Balance) > 1000 THEN 1 ELSE 0 END) AS gl_src_diff_gt_1k,
    SUM(CASE WHEN Days_Past_Due = 0 THEN 1 ELSE 0 END) AS dpd_zero
  FROM enriched
  GROUP BY 1,2
),

/* ------------------------- Summaries ------------------------ */
sum_by_dpd AS (
  SELECT
    Days_Past_Due_Bucket,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS balance
  FROM enriched
  GROUP BY 1
),

sum_by_bal_bucket AS (
  SELECT
    Balance_Bucket,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS balance
  FROM enriched
  GROUP BY 1
),

sum_by_bank_system AS (
  SELECT
    Bank_Code,
    Contract_Source_System,
    COUNT(*) AS loans,
    SUM(Source_System_Balance) AS balance
  FROM enriched
  GROUP BY 1,2
),

/* ----------------------- MoM status ------------------------- */
mom_diff AS (
  SELECT
    COALESCE(c.Account_Identifier, p.Account_Identifier) AS Account_Identifier,
    COALESCE(c.Account_Name,       p.Account_Name)       AS Account_Name,
    COALESCE(c.Bank_Code,          p.Bank_Code)          AS Bank_Code,
    COALESCE(c.Contract_Source_System, p.Contract_Source_System) AS Contract_Source_System,
    CASE
      WHEN p.Account_Identifier IS NULL AND c.Account_Identifier IS NOT NULL THEN 'Added (New NA)'
      WHEN c.Account_Identifier IS NULL AND p.Account_Identifier IS NOT NULL THEN 'Removed (Resolved/Out)'
      ELSE 'Persisting'
    END AS NA_Status_Change,
    p.Source_System_Balance AS Prev_Bal,
    c.Source_System_Balance AS Curr_Bal
  FROM curr_na c
  FULL OUTER JOIN prev_na p
    ON c.Account_Identifier = p.Account_Identifier
),

/* ========= Each section normalized to the same 32 columns ========= */
/* Column layout (32):
   01 Report_Section, 02 Subsection, 03 End_of_Month_Date, 04 Bank_Code,
   05 Account_Name, 06 Contract_Source_System, 07 Customer_Number, 08 Facility_ID,
   09 Account_Identifier, 10 Account_Key, 11 Status_Code_Description, 12 Instrument_Type,
   13 Source_System_Balance, 14 GL_Balance, 15 Available_Balance, 16 Borrower_Risk_Rating,
   17 PD_Grade, 18 Days_Past_Due, 19 Non_Accrual_Flag, 20 Days_Past_Due_Bucket,
   21 Balance_Bucket, 22 Loans, 23 Balance_Sum, 24 GL_Source_Diff_Sum, 25 Dup_Count,
   26 Null_DPD, 27 Missing_PD_Grade, 28 GL_SRC_Diff_GT_1k, 29 DPD_Zero,
   30 Prev_Bal, 31 Curr_Bal, 32 NA_Status_Change
*/

detail_rows AS (
  SELECT
    'DETAIL'::VARCHAR(24),
    NULL::VARCHAR(64),
    e.End_of_Month_Date,
    e.Bank_Code,
    e.Account_Name,
    e.Contract_Source_System,
    e.Customer_Number,
    e.Facility_ID,
    e.Account_Identifier,
    e.Account_Key,
    e.Status_Code_Description,
    e.Instrument_Type,
    e.Source_System_Balance,
    e.GL_Balance,
    e.Available_Balance,
    e.Borrower_Risk_Rating,
    CAST(e.PD_Grade AS VARCHAR(50)),
    e.Days_Past_Due,
    e.Non_Accrual_Flag,
    e.Days_Past_Due_Bucket,
    e.Balance_Bucket,
    NULL::INTEGER,
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::INTEGER,
    NULL::INTEGER,
    NULL::INTEGER,
    NULL::INTEGER,
    NULL::INTEGER,
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::VARCHAR(40)
  FROM enriched e
),

summary_dpd_rows AS (
  SELECT
    'SUMMARY'::VARCHAR(24),
    'By DPD Bucket'::VARCHAR(64),
    NULL::DATE,
    NULL::VARCHAR(10),
    NULL::VARCHAR(200),
    NULL::VARCHAR(40),
    NULL::VARCHAR(40),
    NULL::VARCHAR(40),
    NULL::VARCHAR(60),
    NULL::VARCHAR(60),
    NULL::VARCHAR(200),
    NULL::VARCHAR(80),
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::VARCHAR(40),
    NULL::VARCHAR(50),
    NULL::INTEGER,
    NULL::VARCHAR(1),
    s.Days_Past_Due_Bucket,
    NULL::VARCHAR(32),
    s.loans,
    s.balance,
    NULL::NUMERIC(18,2),
    NULL::INTEGER,
    NULL::INTEGER,
    NULL::INTEGER,
    NULL::INTEGER,
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::VARCHAR(40)
  FROM sum_by_dpd s
),

summary_bal_rows AS (
  SELECT
    'SUMMARY'::VARCHAR(24),
    'By Balance Bucket'::VARCHAR(64),
    NULL::DATE,
    NULL::VARCHAR(10),
    NULL::VARCHAR(200),
    NULL::VARCHAR(40),
    NULL::VARCHAR(40),
    NULL::VARCHAR(40),
    NULL::VARCHAR(60),
    NULL::VARCHAR(60),
    NULL::VARCHAR(200),
    NULL::VARCHAR(80),
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::VARCHAR(40),
    NULL::VARCHAR(50),
    NULL::INTEGER,
    NULL::VARCHAR(1),
    NULL::VARCHAR(32),
    s.Balance_Bucket,
    s.loans,
    s.balance,
    NULL::NUMERIC(18,2),
    NULL::INTEGER,
    NULL::INTEGER,
    NULL::INTEGER,
    NULL::INTEGER,
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::VARCHAR(40)
  FROM sum_by_bal_bucket s
),

summary_bank_sys_rows AS (
  SELECT
    'SUMMARY'::VARCHAR(24),
    'By Bank × System'::VARCHAR(64),
    NULL::DATE,
    s.Bank_Code,
    NULL::VARCHAR(200),
    s.Contract_Source_System,
    NULL::VARCHAR(40),
    NULL::VARCHAR(40),
    NULL::VARCHAR(60),
    NULL::VARCHAR(60),
    NULL::VARCHAR(200),
    NULL::VARCHAR(80),
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::VARCHAR(40),
    NULL::VARCHAR(50),
    NULL::INTEGER,
    NULL::VARCHAR(1),
    NULL::VARCHAR(32),
    NULL::VARCHAR(32),
    s.loans,
    s.balance,
    NULL::NUMERIC(18,2),
    NULL::INTEGER,
    NULL::INTEGER,
    NULL::INTEGER,
    NULL::INTEGER,
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::VARCHAR(40)
  FROM sum_by_bank_system s
),

sanity_dupes_rows AS (
  SELECT
    'SANITY'::VARCHAR(24),
    'Dupes: EOM + Account_Identifier'::VARCHAR(64),
    d.End_of_Month_Date,
    NULL::VARCHAR(10),
    NULL::VARCHAR(200),
    NULL::VARCHAR(40),
    NULL::VARCHAR(40),
    NULL::VARCHAR(40),
    d.Account_Identifier,
    NULL::VARCHAR(60),
    NULL::VARCHAR(200),
    NULL::VARCHAR(80),
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::VARCHAR(40),
    NULL::VARCHAR(50),
    NULL::INTEGER,
    NULL::VARCHAR(1),
    NULL::VARCHAR(32),
    NULL::VARCHAR(32),
    NULL::INTEGER,
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    d.dup_count,
    NULL::INTEGER,
    NULL::INTEGER,
    NULL::INTEGER,
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::VARCHAR(40)
  FROM dupes d
),

sanity_group_rows AS (
  SELECT
    'SANITY'::VARCHAR(24),
    'Group Quality: Bank × System'::VARCHAR(64),
    NULL::DATE,
    s.Bank_Code,
    NULL::VARCHAR(200),
    s.Contract_Source_System,
    NULL::VARCHAR(40),
    NULL::VARCHAR(40),
    NULL::VARCHAR(60),
    NULL::VARCHAR(60),
    NULL::VARCHAR(200),
    NULL::VARCHAR(80),
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::VARCHAR(40),
    NULL::VARCHAR(50),
    NULL::INTEGER,
    NULL::VARCHAR(1),
    NULL::VARCHAR(32),
    NULL::VARCHAR(32),
    s.loans,
    NULL::NUMERIC(18,2),
    (s.sum_gl_bal - s.sum_source_bal) AS GL_Source_Diff_Sum,
    NULL::INTEGER,
    s.null_dpd,
    s.missing_pd_grade,
    s.gl_src_diff_gt_1k,
    s.dpd_zero,
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::VARCHAR(40)
  FROM sanity_by_group s
),

mom_rows AS (
  SELECT
    'MOM'::VARCHAR(24),
    'Adds/Drops/Persisting'::VARCHAR(64),
    NULL::DATE,
    m.Bank_Code,
    m.Account_Name,
    m.Contract_Source_System,
    NULL::VARCHAR(40),
    NULL::VARCHAR(40),
    m.Account_Identifier,
    NULL::VARCHAR(60),
    NULL::VARCHAR(200),
    NULL::VARCHAR(80),
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::VARCHAR(40),
    NULL::VARCHAR(50),
    NULL::INTEGER,
    NULL::VARCHAR(1),
    NULL::VARCHAR(32),
    NULL::VARCHAR(32),
    NULL::INTEGER,
    NULL::NUMERIC(18,2),
    NULL::NUMERIC(18,2),
    NULL::INTEGER,
    NULL::INTEGER,
    NULL::INTEGER,
    NULL::INTEGER,
    m.Prev_Bal,
    m.Curr_Bal,
    m.NA_Status_Change
  FROM mom_diff m
)

/* ========================= FINAL UNION ========================= */
SELECT * FROM detail_rows
UNION ALL
SELECT * FROM summary_dpd_rows
UNION ALL
SELECT * FROM summary_bal_rows
UNION ALL
SELECT * FROM summary_bank_sys_rows
UNION ALL
SELECT * FROM sanity_dupes_rows
UNION ALL
SELECT * FROM sanity_group_rows
UNION ALL
SELECT * FROM mom_rows
ORDER BY
  CASE Report_Section
    WHEN 'DETAIL'  THEN 0
    WHEN 'SUMMARY' THEN 1
    WHEN 'SANITY'  THEN 2
    WHEN 'MOM'     THEN 3
    ELSE 9
  END,
  Subsection NULLS LAST,
  Bank_Code NULLS LAST,
  Contract_Source_System NULLS LAST,
  Days_Past_Due_Bucket NULLS LAST,
  Balance_Bucket NULLS LAST,
  Account_Identifier NULLS LAST;
