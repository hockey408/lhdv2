WITH base AS (
  SELECT
      End_of_Month_Date,
      Bank_Code,
      Account_Name,
      Contract_Source_System,
      Customer_Number,
      Facility_ID,
      Account_Identifier,
      Account_Key,
      Status_Code_Description,
      Instrument_Type,
      Source_System_Balance,
      GL_Balance,
      Available_Balance,
      Borrower_Risk_Rating,
      PD_Grade,
      Days_Past_Due,
      Non_Accrual_Flag
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
),
bucketed AS (
  SELECT
      b.*,
      CASE
        WHEN Source_System_Balance < 250000 THEN '< $250k'
        WHEN Source_System_Balance < 500000 THEN '$250k–< $500k'
        ELSE '≥ $500k'
      END AS balance_bucket
  FROM base b
)
SELECT * FROM bucketed;



WITH base AS (
  SELECT *
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
),
bucketed AS (
  SELECT
      *,
      CASE
        WHEN Source_System_Balance < 250000 THEN '< $250k'
        WHEN Source_System_Balance < 500000 THEN '$250k–< $500k'
        ELSE '≥ $500k'
      END AS balance_bucket
  FROM base
)
SELECT
    balance_bucket,
    COUNT(*)                           AS loan_count,
    COUNT(DISTINCT Customer_Number)    AS borrower_count,
    SUM(Source_System_Balance)         AS total_source_system_balance
FROM bucketed
GROUP BY balance_bucket
ORDER BY MIN(CASE balance_bucket
               WHEN '< $250k' THEN 1
               WHEN '$250k–< $500k' THEN 2
               ELSE 3 END);



WITH base AS (
  SELECT *
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
),
bucketed AS (
  SELECT
      *,
      CASE
        WHEN Source_System_Balance < 250000 THEN '< $250k'
        WHEN Source_System_Balance < 500000 THEN '$250k–< $500k'
        ELSE '≥ $500k'
      END AS balance_bucket
  FROM base
)
SELECT
    Bank_Code,
    balance_bucket,
    COUNT(*)                           AS loan_count,
    COUNT(DISTINCT Customer_Number)    AS borrower_count,
    SUM(Source_System_Balance)         AS total_source_system_balance
FROM bucketed
GROUP BY Bank_Code, balance_bucket
ORDER BY Bank_Code,
         MIN(CASE balance_bucket
               WHEN '< $250k' THEN 1
               WHEN '$250k–< $500k' THEN 2
               ELSE 3 END);




WITH base AS (
  SELECT *
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
),
bucketed AS (
  SELECT
      *,
      CASE
        WHEN Source_System_Balance < 250000 THEN '< $250k'
        WHEN Source_System_Balance < 500000 THEN '$250k–< $500k'
        ELSE '≥ $500k'
      END AS balance_bucket
  FROM base
)
SELECT
    Contract_Source_System,
    balance_bucket,
    COUNT(*)                           AS loan_count,
    COUNT(DISTINCT Customer_Number)    AS borrower_count,
    SUM(Source_System_Balance)         AS total_source_system_balance
FROM bucketed
GROUP BY Contract_Source_System, balance_bucket
ORDER BY Contract_Source_System,
         MIN(CASE balance_bucket
               WHEN '< $250k' THEN 1
               WHEN '$250k–< $500k' THEN 2
               ELSE 3 END);



WITH base AS (
  SELECT *
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
)
SELECT
    End_of_Month_Date,
    Customer_Number                          AS borrower_id,
    MIN(Account_Name)                        AS borrower_name,     -- handy label
    COUNT(*)                                 AS loan_count,
    COUNT(DISTINCT Facility_ID)              AS facility_count,
    SUM(Source_System_Balance)               AS total_source_system_balance
FROM base
GROUP BY End_of_Month_Date, Customer_Number
ORDER BY total_source_system_balance DESC;




WITH base AS (
  SELECT *
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
)
SELECT
    End_of_Month_Date,
    Bank_Code,
    COUNT(DISTINCT Customer_Number)  AS borrower_count,
    COUNT(*)                         AS loan_count,
    SUM(Source_System_Balance)       AS total_source_system_balance
FROM base
GROUP BY End_of_Month_Date, Bank_Code
ORDER BY total_source_system_balance DESC;




WITH base AS (
  SELECT *
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
)
SELECT
    End_of_Month_Date,
    Contract_Source_System,
    COUNT(DISTINCT Customer_Number)  AS borrower_count,
    COUNT(*)                         AS loan_count,
    SUM(Source_System_Balance)       AS total_source_system_balance
FROM base
GROUP BY End_of_Month_Date, Contract_Source_System
ORDER BY total_source_system_balance DESC;





-- Unified extract (BANK + BANK_GL) for Total Loans only
-- Synthetic LJ within Application list:
--   ('ADJ','LIP','ALL','L-FCB SYN','LJ','GL','L-SVB SYN')

SELECT
    'BANK' AS Grain,
    END_OF_MONTH_DATE,
    -- Keep CONTRACT_SOURCE_SYSTEM at BANK grain if you want it visible; remove if not needed
    CONTRACT_SOURCE_SYSTEM,
    BANK_CODE,
    CAST(NULL AS VARCHAR(200)) AS GL_ACCOUNT,
    SUM(CASE WHEN SYNTHETIC_FLAG = 'Y' THEN GL_BALANCE ELSE 0 END) AS Synthetic,
    SUM(CASE WHEN SYNTHETIC_FLAG = 'N' THEN GL_BALANCE ELSE 0 END) AS Non_Synthetic,
    SUM(GL_BALANCE) AS Total_Balance,
    BANK_CODE AS Common_Key,
    CAST(NULL AS VARCHAR(200)) AS Common_Key2,
    CASE
        WHEN SUM(CASE WHEN CONTRACT_SOURCE_SYSTEM IN ('ADJ','LIP','ALL','L-FCB SYN','LJ','GL','L-SVB SYN') THEN 1 ELSE 0 END) > 0
        THEN 'Y' ELSE 'N'
    END AS Is_Synthetic_LJ_Within_App,
    SUM(CASE WHEN CONTRACT_SOURCE_SYSTEM IN ('ADJ','LIP','ALL','L-FCB SYN','LJ','GL','L-SVB SYN') THEN GL_BALANCE ELSE 0 END)
        AS Synthetic_LJ_App_Balance
FROM V_DPRT_CREDIT_INSTRUMENTS_ME
WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
  AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
GROUP BY END_OF_MONTH_DATE, CONTRACT_SOURCE_SYSTEM, BANK_CODE

UNION ALL

SELECT
    'BANK_GL' AS Grain,
    END_OF_MONTH_DATE,
    CAST(NULL AS VARCHAR(200)) AS CONTRACT_SOURCE_SYSTEM,
    BANK_CODE,
    GL_ACCOUNT,
    SUM(CASE WHEN SYNTHETIC_FLAG = 'Y' THEN GL_BALANCE ELSE 0 END) AS Synthetic,
    SUM(CASE WHEN SYNTHETIC_FLAG = 'N' THEN GL_BALANCE ELSE 0 END) AS Non_Synthetic,
    SUM(GL_BALANCE) AS Total_Balance,
    BANK_CODE AS Common_Key,
    GL_ACCOUNT AS Common_Key2,
    CASE
        WHEN SUM(CASE WHEN CONTRACT_SOURCE_SYSTEM IN ('ADJ','LIP','ALL','L-FCB SYN','LJ','GL','L-SVB SYN') THEN 1 ELSE 0 END) > 0
        THEN 'Y' ELSE 'N'
    END AS Is_Synthetic_LJ_Within_App,
    SUM(CASE WHEN CONTRACT_SOURCE_SYSTEM IN ('ADJ','LIP','ALL','L-FCB SYN','LJ','GL','L-SVB SYN') THEN GL_BALANCE ELSE 0 END)
        AS Synthetic_LJ_App_Balance
FROM V_DPRT_CREDIT_INSTRUMENTS_ME
WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
  AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
GROUP BY END_OF_MONTH_DATE, BANK_CODE, GL_ACCOUNT

ORDER BY 1, 2, 9, 10;  -- Grain, END_OF_MONTH_DATE, Common_Key, Common_Key2





// Controls (keep as-is or swap to What-If params)
Anom Window Months := 12
Anom Z Threshold   := 3.0
Anom Min $         := 250000
Anom Min Points    := 3   // require at least 3 months to compute z-score

// Helper: last selected EOM (or overall max if none selected)
Last EOM :=
VAR e = MAX ( 'MonthEnd'[EOM] )
RETURN IF ( ISBLANK(e), CALCULATE( MAX('MonthEnd'[EOM]), ALL('MonthEnd') ), e )

// Table of the last W month-ends up to Last EOM
Anom Window Table :=
VAR W = [Anom Window Months]
RETURN
DATESINPERIOD ( 'MonthEnd'[EOM], [Last EOM], -1 * W, MONTH )

// Build a vector of MoM % for that grain over the window (nonblank only)
Source MoM % Vector :=
VAR Win = [Anom Window Table]
RETURN
FILTER (
    ADDCOLUMNS (
        Win,
        "__x", CALCULATE ( [Source Delta %] )   // evaluated per EOM row at current grain
    ),
    NOT ISBLANK ( [__x] )
)

// Rolling mean & stdev over nonblank points only; require minimum points
Source MoM % Rolling Mean :=
VAR V = [Source MoM % Vector]
VAR N = COUNTROWS ( V )
RETURN IF ( N < [Anom Min Points], BLANK(), AVERAGEX ( V, [__x] ) )

Source MoM % Rolling StDev :=
VAR V = [Source MoM % Vector]
VAR N = COUNTROWS ( V )
RETURN IF ( N < [Anom Min Points], BLANK(), STDEVX.P ( V, [__x] ) )

// Z-score (absolute too)
Source MoM % Z :=
VAR mu = [Source MoM % Rolling Mean]
VAR sd = [Source MoM % Rolling StDev]
VAR x  = [Source Delta %]
RETURN IF ( ISBLANK(mu) || ISBLANK(sd) || sd = 0 || ISBLANK(x), BLANK(), ( x - mu ) / sd )

Source MoM % Z Abs :=
IF ( ISBLANK([Source MoM % Z]), BLANK(), ABS([Source MoM % Z]) )






WITH base AS (
  SELECT
      End_of_Month_Date,
      Bank_Code,
      Account_Name,
      Contract_Source_System,
      Customer_Number,
      Facility_ID,
      Account_Identifier,
      Account_Key,
      Status_Code_Description,
      Instrument_Type,
      Source_System_Balance,
      GL_Balance,
      Available_Balance,
      Borrower_Risk_Rating,
      PD_Grade,
      Days_Past_Due,
      Non_Accrual_Flag
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
    AND SOURCE_SYSTEM_BALANCE > '0'
),
bucketed AS (
  SELECT
      b.*,
      CASE
        WHEN Source_System_Balance < 250000 THEN '< $250k'
        WHEN Source_System_Balance < 500000 THEN '$250k–< $500k'
        ELSE '≥ $500k'
      END AS balance_bucket
  FROM base b
)
SELECT * FROM bucketed;




WITH base AS (
  SELECT
      End_of_Month_Date,
      Bank_Code,
      Account_Name,
      Contract_Source_System,
      Customer_Number,
      Facility_ID,
      Account_Identifier,
      Account_Key,
      Status_Code_Description,
      Instrument_Type,
      Source_System_Balance,
      GL_Balance,
      Available_Balance,
      Borrower_Risk_Rating,
      PD_Grade,
      Days_Past_Due,
      Non_Accrual_Flag
  FROM V_DPRT_CREDIT_INSTRUMENTS_ME
  WHERE END_OF_MONTH_DATE = DATE '2025-07-31'
    AND GL_ACCOUNT_HIER_LEVEL_4 = 'Total Loans'
    AND Non_Accrual_Flag = 'Y'
    AND Source_System_Balance > 0       -- numeric compare
),
bucketed AS (
  SELECT
      b.*,
      CASE
        WHEN Source_System_Balance < 250000 THEN '< $250k'
        WHEN Source_System_Balance < 500000 THEN '$250k–< $500k'
        ELSE '≥ $500k'
      END AS balance_bucket,
      CASE
        WHEN Days_Past_Due = 0 THEN 'Zero Days'
        WHEN Days_Past_Due BETWEEN 1 AND 30 THEN '1-30 Days'
        WHEN Days_Past_Due BETWEEN 31 AND 90 THEN '31-90 Days'
        WHEN Days_Past_Due BETWEEN 91 AND 180 THEN '91-180 Days'
        WHEN Days_Past_Due > 180 THEN '180+ Days'
        ELSE 'Unknown'  -- handles NULLs or unexpected values
      END AS days_past_due_bucket
  FROM base b
)
SELECT *
FROM bucketed;
