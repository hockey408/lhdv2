WITH latest AS (
  SELECT MAX(END_OF_MONTH_DATE) AS max_eom
  FROM V_DPRT_CREDIT_INSTRUMENTS
),
window_months AS (
  SELECT ADD_MONTHS(max_eom, -11) AS min_eom, max_eom
  FROM latest
),
base AS (
  SELECT
      END_OF_MONTH_DATE,
      BANK_CODE,
      CONTRACT_SOURCE_SYSTEM,
      GL_ACCOUNT_CODE,
      GL_BALANCE,
      SOURCE_SYSTEM_BALANCE,
      AVAILABLE_BALANCE,
      COMMITMENT_BALANCE,       -- <- if your table uses COMMITMENT, replace this
      1 AS rec
  FROM V_DPRT_CREDIT_INSTRUMENTS t
  WHERE t.END_OF_MONTH_DATE BETWEEN (SELECT min_eom FROM window_months)
                               AND (SELECT max_eom FROM window_months)
),
agg AS (   -- monthly rollups at the desired grain
  SELECT
      END_OF_MONTH_DATE,
      BANK_CODE,
      CONTRACT_SOURCE_SYSTEM,
      GL_ACCOUNT_CODE,
      SUM(GL_BALANCE)              AS GL_BALANCE,
      SUM(SOURCE_SYSTEM_BALANCE)   AS SOURCE_SYSTEM_BALANCE,
      SUM(AVAILABLE_BALANCE)       AS AVAILABLE_BALANCE,
      SUM(COMMITMENT_BALANCE)      AS COMMITMENT,
      COUNT(*)                     AS RECORD_COUNT
  FROM base
  GROUP BY 1,2,3,4
),
lagged AS (  -- add prior-month values for MoM calculations
  SELECT
      a.*,
      LAG(GL_BALANCE)            OVER (PARTITION BY BANK_CODE, CONTRACT_SOURCE_SYSTEM, GL_ACCOUNT_CODE ORDER BY END_OF_MONTH_DATE) AS prev_GL_BALANCE,
      LAG(SOURCE_SYSTEM_BALANCE) OVER (PARTITION BY BANK_CODE, CONTRACT_SOURCE_SYSTEM, GL_ACCOUNT_CODE ORDER BY END_OF_MONTH_DATE) AS prev_SOURCE_SYSTEM_BALANCE,
      LAG(AVAILABLE_BALANCE)     OVER (PARTITION BY BANK_CODE, CONTRACT_SOURCE_SYSTEM, GL_ACCOUNT_CODE ORDER BY END_OF_MONTH_DATE) AS prev_AVAILABLE_BALANCE,
      LAG(COMMITMENT)            OVER (PARTITION BY BANK_CODE, CONTRACT_SOURCE_SYSTEM, GL_ACCOUNT_CODE ORDER BY END_OF_MONTH_DATE) AS prev_COMMITMENT,
      LAG(RECORD_COUNT)          OVER (PARTITION BY BANK_CODE, CONTRACT_SOURCE_SYSTEM, GL_ACCOUNT_CODE ORDER BY END_OF_MONTH_DATE) AS prev_RECORD_COUNT
  FROM agg a
)
SELECT
    END_OF_MONTH_DATE,
    BANK_CODE,
    CONTRACT_SOURCE_SYSTEM,
    GL_ACCOUNT_CODE,
    -- Levels
    GL_BALANCE,
    SOURCE_SYSTEM_BALANCE,
    AVAILABLE_BALANCE,
    COMMITMENT,
    RECORD_COUNT,
    -- MoM $ change
    (GL_BALANCE            - prev_GL_BALANCE)            AS GLBAL_MoM_$,
    (SOURCE_SYSTEM_BALANCE - prev_SOURCE_SYSTEM_BALANCE) AS SRCBAL_MoM_$,
    (AVAILABLE_BALANCE     - prev_AVAILABLE_BALANCE)     AS AVAIL_MoM_$,
    (COMMITMENT            - prev_COMMITMENT)            AS COMM_MoM_$,
    (RECORD_COUNT          - prev_RECORD_COUNT)          AS RECCNT_MoM,
    -- MoM % change (safe divide)
    CASE WHEN prev_GL_BALANCE            IS NULL OR prev_GL_BALANCE            = 0 THEN NULL
         ELSE (GL_BALANCE - prev_GL_BALANCE) / ABS(prev_GL_BALANCE::DOUBLE) END            AS GLBAL_MoM_%,
    CASE WHEN prev_SOURCE_SYSTEM_BALANCE IS NULL OR prev_SOURCE_SYSTEM_BALANCE = 0 THEN NULL
         ELSE (SOURCE_SYSTEM_BALANCE - prev_SOURCE_SYSTEM_BALANCE) / ABS(prev_SOURCE_SYSTEM_BALANCE::DOUBLE) END AS SRCBAL_MoM_%,
    CASE WHEN prev_AVAILABLE_BALANCE     IS NULL OR prev_AVAILABLE_BALANCE     = 0 THEN NULL
         ELSE (AVAILABLE_BALANCE - prev_AVAILABLE_BALANCE) / ABS(prev_AVAILABLE_BALANCE::DOUBLE) END           AS AVAIL_MoM_%,
    CASE WHEN prev_COMMITMENT            IS NULL OR prev_COMMITMENT            = 0 THEN NULL
         ELSE (COMMITMENT - prev_COMMITMENT) / ABS(prev_COMMITMENT::DOUBLE) END                                AS COMM_MoM_%,
    CASE WHEN prev_RECORD_COUNT          IS NULL OR prev_RECORD_COUNT          = 0 THEN NULL
         ELSE (RECORD_COUNT - prev_RECORD_COUNT) / prev_RECORD_COUNT::DOUBLE END                               AS RECCNT_MoM_%
FROM lagged
ORDER BY BANK_CODE, CONTRACT_SOURCE_SYSTEM, GL_ACCOUNT_CODE, END_OF_MONTH_DATE;